<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>System on Mudox </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/tags/system/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Sat, 08 Nov 2014 22:33:51 CST</updated>
    
    <item>
      <title>SETUP MY ARCH LINUX ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_archlinux_environment/</link>
      <pubDate>Sat, 08 Nov 2014 22:33:51 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_archlinux_environment/</guid>
      <description>

&lt;p&gt;The marathon of installing &amp;amp; tunning the Arch Linux to my flavor.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;SUMMARY&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org&#34;&gt;Arch Linux&lt;/a&gt; + &lt;a href=&#34;http://awesome.naquadah.org&#34;&gt;Awesome WM&lt;/a&gt; + &lt;a href=&#34;http://invisible-island.net/xterm/&#34;&gt;xterm&lt;/a&gt;, that is the
main skeleton of my system.&lt;/p&gt;

&lt;p&gt;I settled on this combination under the rule:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;minimalistic environment, no huge DEs like GNOME, KDE or the likes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fast revolution, always surfing in the front, since it is for personal use,
why not &amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I choose &lt;a href=&#34;http://www.freedesktop.org/wiki/Software/LightDM/&#34;&gt;LightDM&lt;/a&gt;, because it&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;is developed &lt;strong&gt;independent&lt;/strong&gt; of other DEs, hence I don&amp;rsquo;t have to be forced to
install a bunch of GNOME or KDE dependency packages to only for making it
run.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is &lt;strong&gt;lightweight&lt;/strong&gt;. Very small package size, therefore starts up pretty fast, as
I can see.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;has many front ends (a.k.a. &lt;em&gt;greeters&lt;/em&gt;) due to it cross-desktop feature.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Among various &lt;a href=&#34;https://wiki.archlinux.org/index.php/lightdm#Greeter&#34;&gt;greeters&lt;/a&gt;, I currently use &lt;code&gt;lightdm-gtk3-greeter&lt;/code&gt;. It
has a simplistic and neat login screen, just the necessary elements I need.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;THE WINDOW MANAGER &amp;ndash; AWESOME WM&lt;/h1&gt;

&lt;p&gt;I have tried two ways of starting Awesome WM during system boot.&lt;/p&gt;

&lt;p&gt;The first way, is using a &lt;em&gt;display manager&lt;/em&gt;, which will presents you a login
screen, where you enter your user ID &amp;amp; password. After authentication, it
will start the Awesome WM for you.&lt;/p&gt;

&lt;p&gt;The second way is to use &lt;code&gt;xinit&lt;/code&gt; (and it&amp;rsquo;s front-end script &lt;code&gt;startx&lt;/code&gt;). When
display manager is absent in the startup process, system will bring you to one
of the tty consoles, which is just a simplistic command line interface, then
you type &lt;code&gt;startx&lt;/code&gt; manually, which then, according the configuration in
&lt;code&gt;~/.xinitrc&lt;/code&gt;, do some initial setting work and finally start the Awesome WM and
transfer control to it.&lt;/p&gt;

&lt;p&gt;Of the 2 ways I&amp;rsquo;ve tried, I prefer the first one &amp;ndash; using a display
manager. Because the display manager:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the installation &amp;amp; configuration process is relatively simpler than the
&lt;em&gt;xinit&lt;/em&gt; way.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;startup dependent services (e.g. audio, network etc.) in correct order
thanks to &lt;code&gt;systemd&lt;/code&gt;&amp;rsquo;s dependency management.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fully utilize the &lt;code&gt;systemd&lt;/code&gt;&amp;rsquo;s concurrency startup feature, making the whole
startup process pretty faster than the &lt;em&gt;xinit&lt;/em&gt; way.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run fast, there is no need to login to tty console, and type &amp;hellip;, which as
I&amp;rsquo;ve seen, took more time to initiates.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;With display manager&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Installing LightDM&lt;/h3&gt;

&lt;p&gt;First, install &lt;code&gt;LightDM&lt;/code&gt; &amp;amp; &lt;code&gt;lightdm-gtk3-greeter&lt;/code&gt; from official repository. An
extra advantage of choosing &lt;code&gt;lightdm-gtk3-greeter&lt;/code&gt; is that you do not need to
modify the &lt;code&gt;/etc/lightdm/lightdm.conf&lt;/code&gt; to let the &lt;code&gt;LightDM&lt;/code&gt; back-end use it. It
is the reference (default) greeter.&lt;/p&gt;

&lt;p&gt;Then register &lt;code&gt;LightDM&lt;/code&gt; to &lt;code&gt;systemd&lt;/code&gt;, making it get started on boot
automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S lightdm, lightdm-gtk3-greeter

sudo systemctl enable lightdm.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Configuring LightDM&lt;/h3&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Without display manager&lt;/h2&gt;

&lt;p&gt;Without display manager, you should first login into the &lt;code&gt;tty1&lt;/code&gt;, then type
&lt;code&gt;startx&lt;/code&gt; to start the &lt;em&gt;Awesome WM&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Through some configuration, the 2 steps mentioned above can be automated:&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Step 1 &amp;ndash; automatic login to virtual console&lt;/h3&gt;

&lt;p&gt;create the following file and its&amp;rsquo; parent directory if not exists.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;# /etc/systemd/system/getty@tty1.service.d/autologin
------------------------------------------------------------------------------
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin mudox --noclear %I 38400 linux
Type=idle
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Step 2 &amp;ndash; start X at login&lt;/h3&gt;

&lt;p&gt;First install the &lt;code&gt;xorg-xinit&lt;/code&gt; package from the Arch Linux official
repository, which provides the &lt;code&gt;xinit&lt;/code&gt; command &amp;amp; its&amp;rsquo; front end &amp;ndash; the &lt;code&gt;startx&lt;/code&gt;
script, besides, it also put a template &lt;em&gt;xinitrc&lt;/em&gt; file under &lt;code&gt;/etc/skel/&lt;/code&gt;
directory.&lt;/p&gt;

&lt;p&gt;Then, base on &lt;code&gt;/etc/skel/.xinitrc&lt;/code&gt;, create &lt;code&gt;~/.xinitrc&lt;/code&gt; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
#
# ~/.xinitrc
#
# Executed by startx (run your window manager from here)

if [ -d /etc/X11/xinit/xinitrc.d ]; then
  for f in /etc/X11/xinit/xinitrc.d/*; do
    [ -x &amp;quot;$f&amp;quot; ] &amp;amp;&amp;amp; . &amp;quot;$f&amp;quot;
  done
  unset f
fi

xrdb -merge ~/.Xresources # if you have ever created it.

# exec gnome-session
# exec startkde
# exec startxfce4

exec awesome # make sure it&#39;s on the last line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, add the following code into you shell login script, such as &lt;em&gt;.profile&lt;/em&gt;
for bash and &lt;em&gt;.zlogin&lt;/em&gt; for zsh.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ~/.zlogin
------------------------------------------------------------------------------
[[ -z $DISPLAY &amp;amp;&amp;amp; $XDG_VTNR -eq 1 ]] &amp;amp;&amp;amp; exec startx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Automatic_login_to_virtual_console&#34;&gt;Automatic login to virtual console from
ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Start_X_at_login&#34;&gt;Start X at login from ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Xinitrc&#34;&gt;xinitrc form ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_8&#34;&gt;MOUSE ACCELERATION&lt;/h1&gt;

&lt;p&gt;Type &lt;code&gt;xset q | grep Pointer&lt;/code&gt; to see current mouse acceleration setting.&lt;/p&gt;

&lt;p&gt;Try &lt;code&gt;xset m &amp;lt;acceleration&amp;gt; &amp;lt;threshold&amp;gt;&lt;/code&gt; with different values to find the best
combination for your feeling.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;where acceleration defines how many times faster the cursor will move than
the default speed. threshold is the velocity required for acceleration to
become effective, usually measured in device units per 10ms. acceleration can
be a fraction, so if you want to slow down the mouse you can use &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;, &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;,
&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;, &amp;hellip; if you want to make it faster you can use &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;, &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;, &lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Threshold defines the point at which acceleration should occur in pixels per
10 ms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I found my lucky combiantion is &lt;code&gt;1/4 8&lt;/code&gt; and I add the setting command into
&lt;em&gt;rc.lua&lt;/em&gt; of &lt;a href=&#34;http://awesome.naquadah.org&#34;&gt;Awesome WM&lt;/a&gt; to apply the setting on each startup.&lt;/p&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Mouse_acceleration&#34;&gt;Mouse acceleration from ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_9&#34;&gt;INPUT METHOD&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;ibus + isbus-rime&lt;/strong&gt; combinations works nicely on my Arch Linux.&lt;/p&gt;

&lt;p&gt;After ibus gets installed, run &lt;code&gt;ibus-setup&lt;/code&gt;, it will show a setting guide
window where you can adjust ibus settings to adapt to &lt;a href=&#34;awesome&#34;&gt;Awesome WM&lt;/a&gt;
environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I prefer to change the keyboard shortcut of switching to next input method to
&lt;code&gt;&amp;lt;Atl&amp;gt;&amp;lt;Shift&amp;gt;space&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check off the &lt;em&gt;Embed preedit text in application window&lt;/em&gt; option, because I
found it does not run properly in some applications (e.g. Vim).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On  environments, ibus-daemon can not be loaded automatically on
startup, so we need to manually run it. There are many ways to auto-start
applications on linux platform, I choose to let &lt;a href=&#34;awesome&#34;&gt;Awesome WM&lt;/a&gt; to start it by adding
auto-start code in &lt;em&gt;rc.lua&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For ibus-rime, it is in tranditional chinese mode by default. To switch to
simplified chinese mode, press &lt;code&gt;Ctrl-~&lt;/code&gt; when ibus-rime is active to open setup
candiate menu and choose &lt;em&gt;朙月拼音-简化字&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S ibus ibus-qt ibus-rime

ibus-setup

# manually start ibus daemon for this session.
# this command has been added in my Awesome config file &#39;rc.lua&#39; to auto-start
# it in the beginning of each Awesome session.
ibus-daemon -drx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Ibus&#34;&gt;IBus from ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_10&#34;&gt;WINDOW MANAGER&lt;/h1&gt;

&lt;p&gt;On Linux platforms, I prefer WMs to DEs.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://awesome.naquadah.org&#34;&gt;Awesome WM&lt;/a&gt; is my favorite window manager.&lt;/p&gt;

&lt;p&gt;see &lt;a href=&#34;/memo/setup_my_aweseome_wm_environment/&#34;&gt;SETUP MY AWESOME WM ENVIRONMENT&lt;/a&gt;
for details.&lt;/p&gt;

&lt;h1 id=&#34;toc_11&#34;&gt;SHELL ENVIRONMENT&lt;/h1&gt;

&lt;p&gt;I have used several terminal emulators (gnome-terminal, xvrt &amp;hellip;), and finally
I settled myself on &lt;strong&gt;xterm&lt;/strong&gt;, which I feel it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;consume the smallest resource among other terminal emulators.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;starts up very fast.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is much more robust.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is the standard shell for the X Window System, which bring a great
compatiblity.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As to shells, I become a &lt;strong&gt;zsh&lt;/strong&gt; fan soon after played with it as well as
bash &amp;amp; fish shells. the reason is obvious:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;it is powerfull than bash, whose syntax is completely covered by zsh.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;it provides more flexibility in configuration than fish shell.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;there already exist quite a many user contributed resources on the net, e.g:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;on-my-zsh&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/zsh-users/antigen&#34;&gt;antigen&lt;/a&gt; plugin manager.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Pull down dot-files repo&lt;/h2&gt;

&lt;p&gt;My configuration resource related to termianl emulator &amp;amp; shells are managed in
a github repo &amp;ndash; &lt;a href=&#34;https://github.com/Mudox/dot-files.git&#34;&gt;dot-files&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/Git # ~/Git is the place I assemble most of my github repos.
git clone https://github.com/Mudox/dot-files.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;Setup xterm&lt;/h2&gt;

&lt;p&gt;First, install xterm from Arch Linux&amp;rsquo;s official repository.&lt;/p&gt;

&lt;p&gt;Then, link out the .Xresources file from my &lt;a href=&#34;https://github.com/Mudox/dot-files.git&#34;&gt;dot-files&lt;/a&gt; repo. It is
the configuration file that hold my xterm settings (colors, cursors, fonts
etc.) among other x utility setttings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S xterm
cd ~
ln -sf Git/dot-files/Xresources .Xresources
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Setup zsh&lt;/h2&gt;

&lt;p&gt;see &lt;a href=&#34;/memo/setup_my_zsh_environment/&#34;&gt;SETUP MY ZSH ENVIRONMENTS&lt;/a&gt; for details.&lt;/p&gt;

&lt;h1 id=&#34;toc_15&#34;&gt;SETUP VIRTUALBOX&lt;/h1&gt;

&lt;h2 id=&#34;toc_16&#34;&gt;Installing Virtualbox&lt;/h2&gt;

&lt;p&gt;First, from the official repository, install &lt;code&gt;virtualbox&lt;/code&gt; package, which comes
with &lt;code&gt;virtualbox-host-modules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we need to add the basic &lt;strong&gt;vboxdrv&lt;/strong&gt; kernel module to host kernel.&lt;/p&gt;

&lt;p&gt;Finally, add my user name to the &lt;strong&gt;vboxusers&lt;/strong&gt; group in order to use USB port in
virtual machines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S virtualbox

# manually add vboxdrv to host kernel for one time.
sudo modeprobe vboxdrv

# auto-load vboxdrv on every system startup.
sudo echo &#39;vboxdrv&#39; &amp;gt; /etc/modules-load.d/virtualbox.conf

# add user name in vboxusers group to use USB ports in vitual machines.
sudo gpasswd -a &amp;quot;${USER}&amp;quot; vboxusers
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_17&#34;&gt;Configuring Virtualbox&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Set &lt;em&gt;Host Key Combination&lt;/em&gt; to &lt;code&gt;right &amp;lt;winkey&amp;gt;&lt;/code&gt; which is consistent with
&lt;a href=&#34;awesome&#34;&gt;Awesome WM&lt;/a&gt;&amp;rsquo;s keyboads shortcuts, it&amp;rsquo;s in
&lt;em&gt;File-&amp;gt;Preference-&amp;gt;Input-&amp;gt;Virtual Machine&lt;/em&gt; of &lt;em&gt;Oracle VM VitualBox Manager&lt;/em&gt;
window.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enalbe &lt;em&gt;Bidiretional clipboard&lt;/em&gt;, it&amp;rsquo;s in &lt;em&gt;Devices-&amp;gt;Shared
Clipboard-&amp;gt;Bidirectional&lt;/em&gt; of virtual machine window.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Virtualbox&#34;&gt;Virtualbox from ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Kernel_modules&#34;&gt;kernel_modules from ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_18&#34;&gt;VPN&lt;/h1&gt;

&lt;h2 id=&#34;toc_19&#34;&gt;Setup pptpclient&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;install pptpclient from the official repository of Arch Linux.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use &lt;code&gt;pptpsetup&lt;/code&gt; command to register my VPN account, which is just a helper
script that will create a readable text file &lt;code&gt;/etc/ppp/peers/&amp;lt;tunnel_name&amp;gt;&lt;/code&gt;
where you can change the server address manaually using whatever text editor
you like. collect the following information in advance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VPN server&amp;rsquo;s &lt;strong&gt;ip address&lt;/strong&gt; from your VPN provider.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;user name&lt;/strong&gt; of your VPN account.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;user password&lt;/strong&gt; of your VPN account.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;install &lt;code&gt;ppp-mppe&lt;/code&gt; (i.e. Microsoft Pointer-to-Pointer Encryption), if the
&lt;code&gt;pptpsetup&lt;/code&gt; command complains about &lt;em&gt;MPPE&lt;/em&gt; module things.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;test configuration&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;use &lt;code&gt;pon &amp;lt;tunnel_name&amp;gt; debug dump logfd 2 nodetach&lt;/code&gt; to test the
configuration. If everything has been configured correctly, the command
should not terminate. &lt;code&gt;Ctrl-C&lt;/code&gt; to quit it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;type &lt;code&gt;ip addr show&lt;/code&gt;, and you will see a new device &lt;strong&gt;ppp0&lt;/strong&gt; is listed in.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;connect VPN using &lt;code&gt;sudo pon &amp;lt;tunnel_name&amp;gt;&lt;/code&gt;, &lt;code&gt;sudo poff &amp;lt;tunnel_name&amp;gt;&lt;/code&gt; to
tear down.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install pptpclient
sudo pacman -S pptpclient

# add you VPN account (i.e. create a new tunnel)
sudo pptpsetup \
  --create &amp;lt;tunnel_name_whatever_you_like&amp;gt; \
  --server &amp;lt;your_VPN_server_ip_address&amp;gt; \
  --username &amp;lt;username_of_you_VPN_account&amp;gt; \
  --password &amp;lt;password_of_you_VPN_account&amp;gt; \
  --encrypt

# install ppp-mppe, if the command above complains about lacking of `MPPE`
# module things. rerun `pptpsetup` command above after installing it.
sudo pacman -S ppp-mppe

# test 1, the command should not terminate if everything is okay.
sudo pon &amp;lt;tunnel_name_above&amp;gt; debug dump logfd 2 nodetach

# test 2, you would see `ppp0` listed in the output.
ip addr show

# finally, connect!
sudo pon &amp;lt;tunnel_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_20&#34;&gt;Route all traffic through VPN connection&lt;/h2&gt;

&lt;h3 id=&#34;toc_21&#34;&gt;Manually&lt;/h3&gt;

&lt;p&gt;Use the powerfull &lt;code&gt;ip&lt;/code&gt; command to add a route rule into route table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make all packages go through interface ppp0
ip route add default dev ppp0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This route rule is only effective during this ppp session. after your tear down
the VPN connection by &lt;code&gt;sudo pon &amp;lt;tunnel_name&amp;gt;&lt;/code&gt;, it will vanish.&lt;/p&gt;

&lt;h3 id=&#34;toc_22&#34;&gt;Automatically&lt;/h3&gt;

&lt;p&gt;Every executable scripts under /etc/ppp/ip-up.d/ will be called when a VPN
connection startup. Hence, we can use it to automatically set route rules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /etc/ppp/ip-up.d/01-routes.sh
# ----------------------------------------
#!/bin/bash

# This script is called with the following arguments:
# Arg Name
# $1 Interface name
# $2 The tty
# $3 The link speed
# $4 Local IP number
# $5 Peer IP number
# $6 Optional ``ipparam&#39;&#39; value foo

ip route add default via $4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /etc/ppp/ip-up.d
echo &#39;ip route add default via $4&#39; &amp;gt; 01-routes.sh

# the script file need to have `x` permission to be run.
# it&#39;s stdin &amp;amp; stderr will be redirected off terminal, so not output will
# be shown when run.
co
sudo chmod +x /etc/ppp/ip-up.d/01-routes.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_23&#34;&gt;Modify DNS server list&lt;/h2&gt;

&lt;p&gt;If you found you still can not access some site (e.g. youtube, twitter, etc.)
after establishing the VPN connection, then you should insert &lt;code&gt;servername
8.8.8.8&lt;/code&gt; ahead of existing lines in &lt;em&gt;/etc/resolve.conf&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /etc/resolve.conf
# ----------------------------------------
nameserver 8.8.8.8
nameserver 192.168.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_24&#34;&gt;My hacky way&lt;/h3&gt;

&lt;p&gt;I wrote a script to get around of this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ~/.bin/vpn.sh
# ----------------------------------------
#!/bin/sh

tunnel=&amp;quot;your configured tunnel name&amp;quot;

if [ &amp;quot;$#&amp;quot; -ne 1 ]; then
  echo &amp;quot;usage: $0 [on|off]&amp;quot;
  exit 1
fi

case &amp;quot;$1&amp;quot; in
  on )
    # connect
    pon ${tunnel} || exit 1

    # here we just overwrite the /etc/resolv.conf by `echo`ing the hard
    # written DNS list to it.
    printf &amp;quot;nameserver 8.8.8.8\nnameserver 192.168.0.1&amp;quot; &amp;gt; /etc/resolv.conf || exit 1
    ;;
  off )
    # disconnect
    poff ${tunnel}

    # some as above, we just `echo` back.
    echo &#39;nameserver 192.168.0.1&#39; &amp;gt; /etc/resolv.conf || exit 1
    ;;
  * )
    echo &amp;quot;usage: $0 [on|off]&amp;quot;
    ;;
esac

unset tunnel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in your .bashrc or .zshrc file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias vpon=&#39;sudo ~/.bin/vpn.sh on&#39;
alias vpoff=&#39;sudo ~/.bin/vpn.sh off&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then, you can type &lt;code&gt;vpon&lt;/code&gt; to turn on the VPN, and &lt;code&gt;vpoff&lt;/code&gt; to shutdown.&lt;/p&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/PPTP_VPN_client_setup_with_pptpclient&#34;&gt;PPTP VPN client setup with pptpclient&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>