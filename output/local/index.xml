<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Mudox </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Tue, 28 Apr 2015 17:43:56 CST</updated>
    
    <item>
      <title>iOS NOTES - AMAP API DEPICTED</title>
      <link>http://localhost:1313/note/ios_notes_amap/</link>
      <pubDate>Tue, 28 Apr 2015 17:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/ios_notes_amap/</guid>
      <description>

&lt;p&gt;AMap (高德地图) APIs depicted in several graphs I draw.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;AMap Searching API&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;../../../note/amap_searching_graph.svg&#34; alt=&#34;AMap Searching API Graph&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOS NOTES - LOCATION BASED SERVIES</title>
      <link>http://localhost:1313/note/ios_notes_lbs/</link>
      <pubDate>Fri, 17 Apr 2015 14:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/ios_notes_lbs/</guid>
      <description>

&lt;p&gt;Quick steps to use iOS&amp;rsquo;s LBS technology.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Core Location&lt;/h1&gt;

&lt;p&gt;iOS devices integrates various hardware components, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GPS (Global Positioning System) for positioning&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hardware compass for heading monitoring.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WiFi for positioning.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cellular network for cell-tower triangulation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Blue tooth for iBeacon ranging.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;some data sensors for improve positioning accuracy under some circumstances.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to provides users with following LBS abilities as much as possible:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Location Updates&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Standard location updates&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Significant location updates&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Heading monitoring&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Region monitoring&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iBeacon ranging&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Visit events&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;CLLocationManager&lt;/code&gt; acts just like an &lt;code&gt;NSNotificationCenter&lt;/code&gt; (but it is not
a singleton) between the LBS hardwares and your App, you use it to request the
authorization for LBS functionalities you are planning to use afterwords, and
adjusts the relevant parameters of them before starting their notification
updating loops.&lt;/p&gt;

&lt;p&gt;After you call one of its&amp;rsquo; &lt;code&gt;start***&lt;/code&gt; or &lt;code&gt;request***&lt;/code&gt; methods to emit requests
for one of the 5 LBS abilities mentioned above, the &lt;code&gt;CLLocationManager&lt;/code&gt;
activate relevant hardware components, when the data is available it notifies
you asynchronously by calling one of the its&amp;rsquo; delegate&amp;rsquo;s methods.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../note/core_location_map.svg&#34; alt=&#34;Core Location Map&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Work flow of using LBS abilities.&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Project setup&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enable &lt;em&gt;Background Location Updates Background Mode&lt;/em&gt; capability.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add &lt;em&gt;NSLocationAlwaysUsageDescriptions&lt;/em&gt; or
&lt;em&gt;NSLocationWhenInUseUsageDescription&lt;/em&gt; key to info.plist.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configuring &lt;code&gt;CLLocationManager&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Creating a &lt;code&gt;CllocationManager&lt;/code&gt; instance and hold a strong reference to it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Specify location manager&amp;rsquo;s delegate, usually be a view controller.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check &amp;amp; request authorization status.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configures the relevant properties for the LBS functionality you are about
to use.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Before starting each LBS updating functions, there are also corresponding
APIs you can invoke to check the services availability.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Call &lt;code&gt;start**&lt;/code&gt; methods to start the various LBS notification loops.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// declare as some long-standing reference outside of function body.
let locationManager = CLLocationManager()
--------------------
// within functions ( be it in viewDidLoad() )
// designate delegate
locationManager.delegate = self
// request for authorization
locationManager.requestAlwaysAuthorization()
// configure updating related settings
locationManager.activityType = .AutomotiveNavigation
locationManager.desiredAccuracy = kCLLocationAccuracyBestForNavigation
locationManager.distanceFilter = 10
// finally check device &amp;amp; service availability before starting notification loop.
if CLLocationManager.locationServicesEnabled() {
  locationManager.startUpdatingLocation()
} else {
  let alert = UIAlertController(
    title: &amp;quot;Service Not Available&amp;quot;,
    message: &amp;quot;The location is not available or has been shut down.&amp;quot;,
    preferredStyle: .Alert)
  presentViewController(alert, animated: true, completion: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Implement &lt;code&gt;CLLocationManagerDelegate&lt;/code&gt; methods in you designated delegate
object to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;handle received location data updates.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;handle LBS failures.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;handle authorization status changes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;MapKit&lt;/h1&gt;

&lt;p&gt;In general, MapKit:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;shows map in one of three map types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Standard&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Satellite&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hybrid&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;along with many built-in elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;compass&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;POIs (points of interest)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;and provides developer with two kinds of customizable presentation
facilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;annotations&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;overlays&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As of managing annotations, MapKit adopts the same design pattern as that is
heavily used by &lt;code&gt;UITableView&lt;/code&gt; &amp;ndash; decoupling data model from presentation tools
through &lt;strong&gt;reuse pool&lt;/strong&gt;. Hence, there comes separate class hierarchies for
storing annotation (overlay) data, and presenting them respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;data object&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;all objects that conforms to &lt;code&gt;MKAnnotation&lt;/code&gt; protocol, are responsible for
storing data for annotations, such as location, textual info, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;all objects that conforms to &lt;code&gt;MKOverlay&lt;/code&gt; protocol, are responsible for
storing data for overlays, such as location, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;presentation tools&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;instances that inherit from &lt;code&gt;MKAnnotationView&lt;/code&gt; can be &lt;strong&gt;reused&lt;/strong&gt; to display a data objects.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;instances that inherit from &lt;code&gt;MKOverlayRenderer&lt;/code&gt; can be used to display a overlay objects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../note/map_kit_map.svg&#34; alt=&#34;MapKit map&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Customize annotation view&lt;/h2&gt;

&lt;p&gt;A annotation view usually consist of 2 parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The view view.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Set its&amp;rsquo; &lt;code&gt;image&lt;/code&gt; property to change its&amp;rsquo; appearance.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The callout view, which is popped up when the pin view is selected.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The built-in callout view is not exposed for customization, so we should disable the &lt;code&gt;canShowCallout&lt;/code&gt; property&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SWIFT NOTES - CLOSURE</title>
      <link>http://localhost:1313/note/swift_notes_closure/</link>
      <pubDate>Tue, 14 Apr 2015 08:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/swift_notes_closure/</guid>
      <description>

&lt;p&gt;Thanks to the host of technologies provided by the Swift
compiler, the closure comes with a bunch of syntactic
sugars that could sweet you to diabetes.&lt;/p&gt;

&lt;p&gt;The full syntax of a closure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;{
  (parameters) -&amp;gt; retrunType in
  ... statements ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example that uses the array&amp;rsquo;s method &lt;code&gt;sorted&lt;/code&gt; to sort an array of
word.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var words = [ &amp;quot;Dolor&amp;quot;, &amp;quot;eum&amp;quot;, &amp;quot;id&amp;quot;, &amp;quot;suscipit&amp;quot;, &amp;quot;necessitatibus&amp;quot;, &amp;quot;quod&amp;quot;, &amp;quot;hic&amp;quot;, &amp;quot;dignissimos&amp;quot; ]

let sortedWords = words.sorted({
  (lhs: String, rhs: String) -&amp;gt; Bool in
  return lhs &amp;lt; rhs
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the sugars introduced in, we will cut the lines above into an incredibly one
line of code.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Sugar #0 &amp;ndash; trailing closure&lt;/h1&gt;

&lt;p&gt;Often, closure parameter is placed last in parameter list. Swift thus provides
&lt;strong&gt;trailing closure&lt;/strong&gt;, which means your can write the inline closure just
outside the parameter list, following the closing &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Furthermore, if the closure is the only parameter, then the parenthesis can be
omitted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// trailing closure
let sortedWords = words.sorted/*()*/ {
  (lhs: String, rhs: String) -&amp;gt; Bool in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Sugar #1 &amp;ndash; return type inference&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;return type&lt;/strong&gt; can be inferred by swift compiler.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit return type
let sortedWords = words.sorted {
  (lhs: String, rhs: String) /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Sugar #2 &amp;ndash; parameter type inference&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;parameter types&lt;/strong&gt; can be inferred by swift compiler as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit parameter types
let sortedWords = words.sorted {
  (lhs/*: String*/, rhs/*: String*/) /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Sugar #3 &amp;ndash; parenthesis-less&lt;/h1&gt;

&lt;p&gt;Since no type annotation is needed, the &lt;strong&gt;parenthesis&lt;/strong&gt; can be omitted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit parenthesis
let sortedWords = words.sorted {
  /*(*/lhs/*: String*/, rhs/*: String)*/ /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Sugar #4 &amp;ndash; return statement inference&lt;/h1&gt;

&lt;p&gt;If the closure has one statement, then the &lt;strong&gt;return&lt;/strong&gt; statement can also be
inferred.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit &#39;return&#39;
let sortedWords = words.sorted {
  /*(*/lhs/*: String*/, rhs/*: String)*/ /*-&amp;gt; Bool*/ in
  /*return*/ lhs &amp;lt; rhs
}

//then we got:
let sortedWords = words.sorted { lhs, rhs in lhs &amp;lt; rhs }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;Sugar #5 &amp;ndash; shorthand parameter name&lt;/h1&gt;

&lt;p&gt;Swift provides &lt;strong&gt;shorthand parameter names&lt;/strong&gt;: $0 for the 1st parameter, $1 for
the 2nd parameter, and so on. And as an side effect, the whole &lt;code&gt;(parameters) -&amp;gt;
returType in&lt;/code&gt; statement can be completely omitted&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// use shorthand parameters, omit the whole &#39;in&#39; statement
let sortedWords = words.sorted {
  /*(lhs: String, rhs: String) -&amp;gt; Bool in*/
  /*return*/ $0 &amp;lt; $1
}

// then we got:
let sortedWords = words.sorted { $0 &amp;lt; $1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Sugar #6 &amp;ndash; operator as a closure&lt;/h1&gt;

&lt;p&gt;In swift, &lt;strong&gt;operator&lt;/strong&gt; is a function, which in turn is a &lt;strong&gt;special closure&lt;/strong&gt;, so&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// comes operator!
let sortedWords = words.sorted(&amp;lt;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UNICODE CONCEPTS DEFINED</title>
      <link>http://localhost:1313/note/unicode_concepts_defined/</link>
      <pubDate>Mon, 13 Apr 2015 18:10:59 CST</pubDate>
      
      <guid>http://localhost:1313/note/unicode_concepts_defined/</guid>
      <description>&lt;p&gt;Collect several Unicode concepts encountered when I learn Swift&amp;rsquo;s String type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;UCS&lt;/p&gt;

&lt;p&gt;Universal Coded Character Set (通用字符集)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Universal Coded Character Set (UCS), defined by the International
Standard ISO/IEC 10646, Information technology — Universal Coded
Character Set (UCS) (plus amendments to that standard), is a standard set
of characters upon which many character encodings are based. The UCS
contains nearly one hundred thousand abstract characters, each identified
by an unambiguous name and an integer number called its code point.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unicode&lt;/p&gt;

&lt;p&gt;统一码，万国码, 单一码&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unicode is a computing industry standard for the consistent encoding,
representation, and handling of text expressed in most of the world&amp;rsquo;s
writing systems. Developed in conjunction with the Universal Character
Set standard and published as The Unicode Standard, the latest version of
Unicode contains a repertoire of more than 110,000 characters covering
100 scripts and multiple symbol sets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As for its&amp;rsquo; code space layout:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unicode comprises 1,114,112 code points in the range 0x0 to 0x10FFFF.
The Unicode code space is divided into 17 planes (the basic multilingual
plane, and 16 supplementary planes), each with 65,536 (= 216) code
points. Thus the total size of the Unicode code space is 17 × 65,536 =
1,114,112.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UTF&lt;/p&gt;

&lt;p&gt;UCS/Unicode Transformation Format (通用字符集转换格式, Unicode 转换格式)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UTF-8&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;UTF-8 (U from Universal Character Set + Transformation Format—8-bit[1])
is a character encoding capable of encoding all possible characters
(called code points) in Unicode. The encoding is variable-length and uses
8-bit code units. It was designed for backward compatibility with ASCII
and to avoid the complications of endianness and byte order marks in
UTF-16 and UTF-32.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;code point (code position)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In character encoding terminology, a code point or code position is any
of the numerical values that make up the code space.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unicode scalar&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Behind the scenes, Swift’s native String type is built from Unicode
scalar values. A Unicode scalar is a unique 21-bit number for a character
or modifier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The distinction between Unicode scalar &amp;amp; Unicode code point could be
clarified as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Unicode scalar is any Unicode code point in the range U+0000 to U+D7FF
inclusive or U+E000 to U+10FFFF inclusive. Unicode scalars do not include
the Unicode surrogate pair code points, which are the code points in the
range U+D800 to U+DFFF inclusive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is a Swift language specific notion, or more actually, a Swift defined
internal type for storing string charactor&amp;rsquo;s Unicode points that Swift
choose to support. Behind the scene, it&amp;rsquo;s a 21bit long numeric type, but
not all number in the range can reponds to a valid Unicode point.&lt;/p&gt;

&lt;p&gt;So mathematically, the Unicode points universal set is a discrete subset of
integer set [0, 0x10FFFF]. The Swift Unicode scalar universal set is, in
turn, a discrete subset of Unicode code point universal set (with all
&lt;em&gt;surroagte pair&lt;/em&gt; code points stripped).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;code unit&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A code unit is a bit sequence used to encode each character of a
repertoire. Encodings associate their meaning with either a single code
unit value or a sequence of code units as one value.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;extended grapheme cluster&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every instance of Swift’s Character type represents a single extended
grapheme cluster. An extended grapheme cluster is a sequence of one or
more Unicode scalars that (when combined) produce a single human-readable
character.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SWIFT NOTES - FUNCTIONS</title>
      <link>http://localhost:1313/note/swift_notes_functions/</link>
      <pubDate>Mon, 13 Apr 2015 16:26:59 CST</pubDate>
      
      <guid>http://localhost:1313/note/swift_notes_functions/</guid>
      <description>

&lt;p&gt;Excerpts from the &amp;ldquo;Functions&amp;rdquo; section of the official docuemnt &amp;ldquo;The Swift
Programming Language&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Function Parameters&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Parameter names&lt;/h2&gt;

&lt;p&gt;A parameter name can have a &lt;strong&gt;internal name&lt;/strong&gt; and an &lt;strong&gt;external name&lt;/strong&gt; declared
in the form of: &lt;code&gt;external_name internal_name: type&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func join(String string: leftString, toString rightString) -&amp;gt; String {
  return leftString + rightString
}

println(join(String: &amp;quot;Hello&amp;quot;, toString: &amp;quot; World!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;#&lt;/code&gt; to use the same name for both names: &lt;code&gt;#name: type&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func join(#aString: leftString, #toString) -&amp;gt; String {
  return aString + toString
}

println(join(aString: &amp;quot;Hello&amp;quot;, toString: &amp;quot; World!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;_&lt;/code&gt; to suppress external name: &lt;code&gt;_ internal_name: type&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func join(_ aString: leftString, _ toString) -&amp;gt; String {
  return aString + toString
}

println(join(&amp;quot;Hello&amp;quot;, &amp;quot; World!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Parameters with default value&lt;/h2&gt;

&lt;p&gt;Default parameter values of the &lt;code&gt;[external_name /_/#]internal_name: type =
default_value&lt;/code&gt; should be placed at end of the parameter list.&lt;/p&gt;

&lt;p&gt;The compiler will synthesize a external name by reusing the internal name for
parameters with default value, if their external name is not explicitly
specified in the parameter list. (You can use &lt;code&gt;_&lt;/code&gt; to suppress this behavior,
which is not recommended.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func Foo(arg1: String, arg2: Int = 30, _ arg3: Bool, #arg4: Double) {
  ...
}

Foo(&amp;quot;text&amp;quot;, arg2: 1, true, arg4: 4.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Variadic parameters&lt;/h2&gt;

&lt;p&gt;Declare variadic parameter in form &lt;code&gt;name: type...&lt;/code&gt;, which, in the function
body, is of type &lt;code&gt;[type]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Only one variadic parameter is allowed in a parameter list, and it should be
placed after all other normal parameters or parameters with default value.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Variable parameters&lt;/h2&gt;

&lt;p&gt;Prefix parameter names with keyword &lt;code&gt;var&lt;/code&gt; to make them modifiable inside the
function body.&lt;/p&gt;

&lt;p&gt;It is just another small syntactic sugar brought by Swift, the change made in
the function body will not propagate outside the function body.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;In-Out parameters&lt;/h2&gt;

&lt;p&gt;Prefix parameters names with keyword &lt;code&gt;inout&lt;/code&gt; (which implies &lt;code&gt;var&lt;/code&gt;) to make the
change to the parameter inside function body propagate outside.&lt;/p&gt;

&lt;p&gt;When specifying argument for &lt;code&gt;inout&lt;/code&gt; parameters, prepend &lt;code&gt;&amp;amp;&lt;/code&gt; to the argument
name to indicate that it could be modified during the function call.&lt;/p&gt;

&lt;p&gt;In-out parameters cannot have default values, and variadic parameters cannot be
marked as &lt;code&gt;inout&lt;/code&gt;. If you mark a parameter as &lt;code&gt;inout&lt;/code&gt;, it cannot also be marked
as var or let.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func swapTwoInts(inout a: Int, inout b: Int) {
    let temporaryA = a
    a = b
    b = temporaryA
}

var a = 2
var b = 10
swapTwoInts(&amp;amp;a, &amp;amp;b)
println(&amp;quot;after swapping, a = \(a), b = \(b)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Function Return Values&lt;/h1&gt;

&lt;p&gt;Functions without a defined return type return a special value of type
&lt;strong&gt;Void&lt;/strong&gt;.  This is simply an empty tuple, in effect a tuple with zero elements,
which can be written as &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use a tuple type (or a optional tuple) as the return type for a
function to return multiple values as part of one compound return value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// wrap multiple return values in an optional tuple.
func minMax(array: [Int]) -&amp;gt; (min: Int, max: Int)? { ... }

if let minMax = minMax([1,2,3]) {
  // use name to fetch tuple element.
  println(&amp;quot;min: \(minMax.min)\tmax: \(minMax.max)&amp;quot;)

  // use index to fetch tuple elements.
  println(&amp;quot;min: \(minMax.0)\tmax: \(minMax.1)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Function Types&lt;/h1&gt;

&lt;p&gt;In Swift, function is first class object, so feel free to use them as other
normal objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;passing them as argument into functions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;return them from functions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;declare theme as type alias for convenience.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;even nest their in another function.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias cmp = (Int, Int) -&amp;gt; Bool

func whichCmp(functionPassedIn: ()-&amp;gt; Bool) -&amp;gt; cmp {
  func Foo(lhs: Int, rhs: Int) -&amp;gt; Bool {
    return false
  }

  func Hoo(lhs: Int, rhs: Int) -&amp;gt; Bool {
    return true
  }

  return functionPassedIn() ? Foo : Hoo
}

func aFunc() -&amp;gt; Bool {
  return false
}

whichCmp(aFunc)(1334, 234)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>iOS NOTES - CASTING</title>
      <link>http://localhost:1313/note/ios_notes_casting/</link>
      <pubDate>Sun, 12 Apr 2015 14:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/ios_notes_casting/</guid>
      <description>

&lt;p&gt;Collect all my gain from study &amp;amp; using Swift&amp;rsquo;s casting mechanism here.&lt;/p&gt;

&lt;p&gt;First defining a sample class hierarchy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class SuperClass {
  func say() {
    println(&amp;quot;super class&amp;quot;)
  }
}

class Subclass: SuperClass {
  override func say() {
    println(&amp;quot;subclass&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;3 Kinds of Castings&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Natural Casting&lt;/p&gt;

&lt;p&gt;Used in &lt;strong&gt;up-casting&lt;/strong&gt; (i.e. casting from a sub-class instance to a super
class instance)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var a = SubClass()
var b = a as SuperClass
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unconditional Casting (or forced casting)&lt;/p&gt;

&lt;p&gt;Used in &lt;strong&gt;down-casting&lt;/strong&gt; (i.e. the contrary of the above).&lt;/p&gt;

&lt;p&gt;When the casting failed, it would incur a panic.&lt;/p&gt;

&lt;p&gt;Use it when you are confident about the down-casting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conditional Casting&lt;/p&gt;

&lt;p&gt;Used in &lt;strong&gt;down-casting&lt;/strong&gt;, but it always returns optionals whether succeed
or fail, that means when not
applicalbe, instead of emitting a panic, it returns nil.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Natural casting is used in &lt;em&gt;always-succeed&lt;/em&gt; castings.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conditional &amp;amp; Unconditional castings are used in &lt;em&gt;might-fail&lt;/em&gt; castings.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;2 Operator for Casting&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;is&lt;/code&gt; operator&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;as&lt;/code&gt; operators - &lt;code&gt;as&lt;/code&gt;, &lt;code&gt;as?&lt;/code&gt;, &lt;code&gt;as!&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Special casting scenarios in practice&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Protocol Casting&lt;/h2&gt;

&lt;p&gt;In Swift the relationship between a protocol and the classes adopting that
protocol is like the relationship between a super class and its&amp;rsquo; sub-classes.
Hence casting a protocol object, such as the &lt;code&gt;AnyObject&lt;/code&gt; to its&amp;rsquo; underlying
class is regarded as a down-casting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit // import AppKit

let a: AnyObject = &amp;quot;String&amp;quot;
let b: a as! String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are 3 special types: &lt;code&gt;Any&lt;/code&gt;, &lt;code&gt;AnyObject&lt;/code&gt;, &lt;code&gt;AnyClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By tracing the source code, you would find the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// The protocol to which all classes implicitly conform.
///
/// When used as a concrete type, all known `@objc` methods and
/// properties are available, as implicitly-unwrapped-optional methods
/// and properties respectively, on each instance of `AnyObject`.
@objc procotol AnyObject {}

/// The protocol to which all class types implicitly conform.
///
/// When used as a concrete type, all known `@objc` `class` methods and
/// properties are available, as implicitly-unwrapped-optional methods
/// and properties respectively, on each instance of `AnyClass`.
typealias AnyClass = AnyObject.Type

/// The protocol to which all types implicitly conform
typealias Any = protocol&amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There exists a prerequisite for the rules all above: the &lt;code&gt;Foundation&lt;/code&gt; framework
must be imported. (Usually, you import &lt;code&gt;UIKit&lt;/code&gt; or &lt;code&gt;AppKit&lt;/code&gt;, which implicitly
import &lt;code&gt;Foundation&lt;/code&gt; framework). Only then can swift compiler be able to
recognize the &lt;code&gt;@objc&lt;/code&gt; keyword, and have Objective-C type bridging ability.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Optional AnyObject Collection Casting&lt;/h2&gt;

&lt;p&gt;For a optional of Collection of AnyObject that reference objects of the same
class (or super class) T, can be [un]conditionally casted to [T] (without
being wrapped in optional anymore)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit // import Appkit

// optional array of String.
let a: [AnyObject]? = [&amp;quot;Newyork&amp;quot;, &amp;quot;London&amp;quot;, &amp;quot;Peking&amp;quot;]
let b = a as! [String] // succeed.

// optional array of mixed object that have no common super class.
let a: [AnyObject]? = [&amp;quot;Newyork&amp;quot;, 1983, 3.14, false]
let b = a as! [String] // fail: not all element are of String.

// optinal array of mixed objects that derived from the same super class.
let a: [AnyObject]? = [Subclass(), SuperClass(), SuperClass(), Subclass()]
let b = a as! [Subclass] // succeed: not all element are of String.

// implicitly unwrapped optional dictionary with String typped keys and Int typed values.
let a: [NSObject: AnyObject]! = [&amp;quot;id1&amp;quot;: 32, &amp;quot;id2&amp;quot;: 66]
if let b = a as? [String: Int] {
  println(b)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code list above, the String is a structure type in Swift (no a class
type), but it can also be referenced by a &lt;code&gt;AnyObject&lt;/code&gt; instance. The rules come
from the following excerpt from &amp;ldquo;Using Swift with Cocoa and Objective-C&amp;rdquo;
official document:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An object is AnyObject compatible if it is an instance of an Objective-C or
Swift class, or if the object can be bridged to one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There exist several swift - Objective-C type bridging depicted as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../note/swift_objc_bridging.svg&#34; alt=&#34;Siwft - Objective-C Bridging&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Hence, back to the code listing above, the Swift type &lt;code&gt;String&lt;/code&gt; can be bridged
to NSString &lt;code&gt;Foundation&lt;/code&gt; class, then it is &lt;code&gt;AnyObject&lt;/code&gt; compatible.&lt;/p&gt;

&lt;p&gt;In practice, there exists quit a few occasions that you need to cast optional
collections to type specific Swift collections to utilize their underlying
methods or properties.&lt;/p&gt;

&lt;p&gt;For example, when you invoke the Objective-C APIs that return &lt;code&gt;NSArray&lt;/code&gt;,
&lt;code&gt;NSDictionary&lt;/code&gt;, &lt;code&gt;NSSet&lt;/code&gt;, you would get &lt;code&gt;[AnyOject]!&lt;/code&gt; &lt;code&gt;[NSObject: AnyOject]!&lt;/code&gt;,
&lt;code&gt;[NSObject]!&lt;/code&gt; respectively, you could cast [un]conditionally to a more concrete
Swift collection type before you access the individual elements within they.&lt;/p&gt;

&lt;p&gt;When you use &lt;code&gt;as!&lt;/code&gt; (the unconditional casting), you got an unwrapped collection
in one line of code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let asset: AVURLAsset = ...
for meta in asset.commonMetadata as! [AVMetadataItem] {
  switch meta.commonKey {
  case AVMetadataCommonKeyTitle:
    item.title = meta.stringValue
  case AVMetadataCommonKeyArtist:
    item.artist = meta.stringValue
  case AVMetadataCommonKeyAlbumName:
    item.albumName = meta.stringValue
  case AVMetadataCommonKeyArtwork:
    switch meta.value {
    case let data as NSData:
      item.artwork = UIImage(data: data)
    case let dict as [NSObject: AnyObject]:
      item.artwork = UIImage(data: dict[&amp;quot;data&amp;quot;] as! NSData)
    default:
      assert(false, &amp;quot;Invalid metadata value type&amp;quot;)
    }
  default:
    break
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>iOS NOTES - KEYBOARD</title>
      <link>http://localhost:1313/note/ios_notes_keyboard/</link>
      <pubDate>Wed, 08 Apr 2015 16:19:59 CST</pubDate>
      
      <guid>http://localhost:1313/note/ios_notes_keyboard/</guid>
      <description>

&lt;p&gt;Handle iOS keyboard poppu &amp;amp; resignment gracefully.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;UIWindow provide 6 keyboard related notifications&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIKeyboard[Will/Did]ShowNotification&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIKeyboard[Will/Did]HideNotification&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIKeyboard[Will/Did]ChangeFrameNotification&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After playing with these notifications above, I found:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When you want to move obscured contents or views to above the keyboard, put
the frame adjustment code in *&lt;strong&gt;Will&lt;/strong&gt;* notifications, because the handler
methods seems to be invoked within the same animation block that provides
the keyboard revealing animation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you are only interested in tracing keyboard&amp;rsquo;s frame (more specifically the
height) during keyboard&amp;rsquo;s presence, monitoring
&lt;code&gt;UIKeyboardWillShowNotification&lt;/code&gt; seems enough, no need to monitoring
&lt;code&gt;UIKboardWillChangeFrameNotification&lt;/code&gt; additionally.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The frame size stored in &lt;code&gt;UIKeyboardFrameBeginUserInfoKey&lt;/code&gt; and
&lt;code&gt;UIKeyboardFrameEndUserInfoKey&lt;/code&gt; keys will only differ after keyboard is
first shown and before it is hidden. When the keyboard is first shown or is
resigned, the &lt;code&gt;Begin&lt;/code&gt; or &lt;code&gt;End&lt;/code&gt; frame is equal.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Strategies for move contents above the keyboard:&lt;/h1&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;For contents embedded in &lt;code&gt;UISCrollView&lt;/code&gt;s&lt;/h2&gt;

&lt;p&gt;Way #1 &amp;ndash; Adjust the bottom edge inset value of the containing scroll view&amp;rsquo;s
contentsInset property and scroll active view into visible area using
&lt;code&gt;scrollRectToVisible: animated:&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Way #2 &amp;ndash; Adjust containing scroll view&amp;rsquo;s contentSize &amp;amp; contentOffset
properties.&lt;/p&gt;

&lt;p&gt;No matter which way above you choose, remember to adjust
&lt;code&gt;scrollIndicatorInsets&lt;/code&gt;&amp;rsquo;s bottom edge inset value to make the indicator fully
un-obscured from the keyboard.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;For contents outside any &lt;code&gt;UIScrollView&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Recalculate and set its&amp;rsquo; frame.origin.y value in
&lt;code&gt;UIKeyboardWillShowNotification&lt;/code&gt; handler method, and the movement will be
animated along with the revealing of keyboard perfectly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func handleKeyboardNotification(notify: NSNotification) {
  let value = notify.userInfo?[UIKeyboardFrameEndUserInfoKey] as NSValue
  let keyboardHeight = value.CGRectValue().height

  switch notify.name {

  case UIKeyboardWillShowNotification:
    theViewToMove.frame.origin.y = self.view.bounds.height - keyboardHeight - theViewToMoveMargin - theViewToMove.bounds.height
    theScrollViewToAdjust.contentInset.bottom = keyboardHeight
    itemsTable.scrollIndicatorInsets.bottom = keyboardHeight

  case UIKeyboardWillHideNotification:
    theViewToMove.frame.origin.y = self.view.bounds.height - theViewToMoveMargin - theViewToMove.bounds.height
    theScrollViewToAdjust.contentInset.bottom = 0.0
    itemsTable.scrollIndicatorInsets.bottom = 0.0 // the default value

  default:
    assert(false)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;References:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html#//apple_ref/doc/uid/TP40009542-CH5-SW7&#34;&gt;Moving Contents That is Located Under the Keyboard in Text Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIWindow_Class/&#34;&gt;UIWindow Class Reference&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ERROR COLLECTION - IOS</title>
      <link>http://localhost:1313/memo/error_collection_ios/</link>
      <pubDate>Sat, 07 Feb 2015 09:24:33 CST</pubDate>
      
      <guid>http://localhost:1313/memo/error_collection_ios/</guid>
      <description>&lt;p&gt;Errors that I collected day by day, when developing iOS apps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Specifying an invalid frame size (i.e. 0 width or 0 height), can make
UIView&amp;rsquo;s such as UISlider unresponsive to user interaction.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Always wrap multiple statements following a &lt;code&gt;switch case:&lt;/code&gt; in a curly brace,
where we can even put a variable declaration in it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Should &lt;strong&gt;NOT&lt;/strong&gt; assgin one instance of &lt;code&gt;UIImage&lt;/code&gt; to multiple
&lt;code&gt;UITextField.leftView&lt;/code&gt; or &lt;code&gt;UITextField.rightView&lt;/code&gt; properties.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UIImageView, by defaults, is &lt;strong&gt;NOT&lt;/strong&gt; userInteractionEnabled, hence sub views
under them may not receive touch events.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When creating outlets for UILabel views, &lt;strong&gt;DO NOT&lt;/strong&gt; name the property
&amp;ldquo;title&amp;rdquo;, cause the super class of your view controller &lt;code&gt;UIViewController&lt;/code&gt;
itself has a property &amp;lsquo;title&amp;rsquo;, it will incur exception at runtime time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remember to clean dead connnection recorded by storyboards for controls &amp;amp;
views in interface builder window.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dragging an element with &lt;Atl&gt; key pressed, will copy it&amp;rsquo;s attributes as well as
it&amp;rsquo;s connections and other info set in the interface builder and uitility
panes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When presenting a view controller from a content view controller embeded in a
&lt;strong&gt;navigation view controller&lt;/strong&gt;, it is the navigation view controller, rather
than the embeded content view controller, which is &lt;strong&gt;presenting&lt;/strong&gt; the view
controller.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When customizing table view cells, &lt;strong&gt;DOT NOT&lt;/strong&gt; use &lt;code&gt;UIButton&lt;/code&gt; to cover the cell for
triggering the segue, which would bring a function redundant and thus
complicates things.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; auto-layout a subview within a auto-layout&amp;rsquo;ed &lt;code&gt;UIScrollView&lt;/code&gt; when
you plan to perform zooming operation in it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After getting a reused cell, make sure all its&amp;rsquo; states get reset to the current
value or the default value, otherwise the remained states set by last usage
would mess your up.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;setting &lt;code&gt;clipsToBounds&lt;/code&gt; to true will clips layer shadow off.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY ARCH LINUX ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_archlinux_environment/</link>
      <pubDate>Sat, 08 Nov 2014 22:33:51 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_archlinux_environment/</guid>
      <description>

&lt;p&gt;The marathon of installing &amp;amp; tunning the Arch Linux to my flavor.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;SUMMARY&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org&#34;&gt;Arch Linux&lt;/a&gt; + &lt;a href=&#34;http://awesome.naquadah.org&#34;&gt;Awesome WM&lt;/a&gt; + &lt;a href=&#34;http://invisible-island.net/xterm/&#34;&gt;xterm&lt;/a&gt;, that is the
main skeleton of my system.&lt;/p&gt;

&lt;p&gt;I settled on this combination under the rule:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;minimalistic environment, no huge DEs like GNOME, KDE or the likes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fast revolution, always surfing in the front, since it is for personal use,
why not &amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I choose &lt;a href=&#34;http://www.freedesktop.org/wiki/Software/LightDM/&#34;&gt;LightDM&lt;/a&gt;, because it&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;is developed &lt;strong&gt;independent&lt;/strong&gt; of other DEs, hence I don&amp;rsquo;t have to be forced to
install a bunch of GNOME or KDE dependency packages to only for making it
run.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is &lt;strong&gt;lightweight&lt;/strong&gt;. Very small package size, therefore starts up pretty fast, as
I can see.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;has many front ends (a.k.a. &lt;em&gt;greeters&lt;/em&gt;) due to it cross-desktop feature.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Among various &lt;a href=&#34;https://wiki.archlinux.org/index.php/lightdm#Greeter&#34;&gt;greeters&lt;/a&gt;, I currently use &lt;code&gt;lightdm-gtk3-greeter&lt;/code&gt;. It
has a simplistic and neat login screen, just the necessary elements I need.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;THE WINDOW MANAGER &amp;ndash; AWESOME WM&lt;/h1&gt;

&lt;p&gt;I have tried two ways of starting Awesome WM during system boot.&lt;/p&gt;

&lt;p&gt;The first way, is using a &lt;em&gt;display manager&lt;/em&gt;, which will presents you a login
screen, where you enter your user ID &amp;amp; password. After authentication, it
will start the Awesome WM for you.&lt;/p&gt;

&lt;p&gt;The second way is to use &lt;code&gt;xinit&lt;/code&gt; (and it&amp;rsquo;s front-end script &lt;code&gt;startx&lt;/code&gt;). When
display manager is absent in the startup process, system will bring you to one
of the tty consoles, which is just a simplistic command line interface, then
you type &lt;code&gt;startx&lt;/code&gt; manually, which then, according the configuration in
&lt;code&gt;~/.xinitrc&lt;/code&gt;, do some initial setting work and finally start the Awesome WM and
transfer control to it.&lt;/p&gt;

&lt;p&gt;Of the 2 ways I&amp;rsquo;ve tried, I prefer the first one &amp;ndash; using a display
manager. Because the display manager:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the installation &amp;amp; configuration process is relatively simpler than the
&lt;em&gt;xinit&lt;/em&gt; way.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;startup dependent services (e.g. audio, network etc.) in correct order
thanks to &lt;code&gt;systemd&lt;/code&gt;&amp;rsquo;s dependency management.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fully utilize the &lt;code&gt;systemd&lt;/code&gt;&amp;rsquo;s concurrency startup feature, making the whole
startup process pretty faster than the &lt;em&gt;xinit&lt;/em&gt; way.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run fast, there is no need to login to tty console, and type &amp;hellip;, which as
I&amp;rsquo;ve seen, took more time to initiates.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;With display manager&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Installing LightDM&lt;/h3&gt;

&lt;p&gt;First, install &lt;code&gt;LightDM&lt;/code&gt; &amp;amp; &lt;code&gt;lightdm-gtk3-greeter&lt;/code&gt; from official repository. An
extra advantage of choosing &lt;code&gt;lightdm-gtk3-greeter&lt;/code&gt; is that you do not need to
modify the &lt;code&gt;/etc/lightdm/lightdm.conf&lt;/code&gt; to let the &lt;code&gt;LightDM&lt;/code&gt; back-end use it. It
is the reference (default) greeter.&lt;/p&gt;

&lt;p&gt;Then register &lt;code&gt;LightDM&lt;/code&gt; to &lt;code&gt;systemd&lt;/code&gt;, making it get started on boot
automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S lightdm, lightdm-gtk3-greeter

sudo systemctl enable lightdm.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Configuring LightDM&lt;/h3&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Without display manager&lt;/h2&gt;

&lt;p&gt;Without display manager, you should first login into the &lt;code&gt;tty1&lt;/code&gt;, then type
&lt;code&gt;startx&lt;/code&gt; to start the &lt;em&gt;Awesome WM&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Through some configuration, the 2 steps mentioned above can be automated:&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Step 1 &amp;ndash; automatic login to virtual console&lt;/h3&gt;

&lt;p&gt;create the following file and its&amp;rsquo; parent directory if not exists.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;# /etc/systemd/system/getty@tty1.service.d/autologin
------------------------------------------------------------------------------
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin mudox --noclear %I 38400 linux
Type=idle
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Step 2 &amp;ndash; start X at login&lt;/h3&gt;

&lt;p&gt;First install the &lt;code&gt;xorg-xinit&lt;/code&gt; package from the Arch Linux official
repository, which provides the &lt;code&gt;xinit&lt;/code&gt; command &amp;amp; its&amp;rsquo; front end &amp;ndash; the &lt;code&gt;startx&lt;/code&gt;
script, besides, it also put a template &lt;em&gt;xinitrc&lt;/em&gt; file under &lt;code&gt;/etc/skel/&lt;/code&gt;
directory.&lt;/p&gt;

&lt;p&gt;Then, base on &lt;code&gt;/etc/skel/.xinitrc&lt;/code&gt;, create &lt;code&gt;~/.xinitrc&lt;/code&gt; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
#
# ~/.xinitrc
#
# Executed by startx (run your window manager from here)

if [ -d /etc/X11/xinit/xinitrc.d ]; then
  for f in /etc/X11/xinit/xinitrc.d/*; do
    [ -x &amp;quot;$f&amp;quot; ] &amp;amp;&amp;amp; . &amp;quot;$f&amp;quot;
  done
  unset f
fi

xrdb -merge ~/.Xresources # if you have ever created it.

# exec gnome-session
# exec startkde
# exec startxfce4

exec awesome # make sure it&#39;s on the last line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, add the following code into you shell login script, such as &lt;em&gt;.profile&lt;/em&gt;
for bash and &lt;em&gt;.zlogin&lt;/em&gt; for zsh.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ~/.zlogin
------------------------------------------------------------------------------
[[ -z $DISPLAY &amp;amp;&amp;amp; $XDG_VTNR -eq 1 ]] &amp;amp;&amp;amp; exec startx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Automatic_login_to_virtual_console&#34;&gt;Automatic login to virtual console from
ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Start_X_at_login&#34;&gt;Start X at login from ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Xinitrc&#34;&gt;xinitrc form ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_8&#34;&gt;MOUSE ACCELERATION&lt;/h1&gt;

&lt;p&gt;Type &lt;code&gt;xset q | grep Pointer&lt;/code&gt; to see current mouse acceleration setting.&lt;/p&gt;

&lt;p&gt;Try &lt;code&gt;xset m &amp;lt;acceleration&amp;gt; &amp;lt;threshold&amp;gt;&lt;/code&gt; with different values to find the best
combination for your feeling.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;where acceleration defines how many times faster the cursor will move than
the default speed. threshold is the velocity required for acceleration to
become effective, usually measured in device units per 10ms. acceleration can
be a fraction, so if you want to slow down the mouse you can use &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;, &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;,
&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;, &amp;hellip; if you want to make it faster you can use &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;, &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;, &lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Threshold defines the point at which acceleration should occur in pixels per
10 ms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I found my lucky combiantion is &lt;code&gt;1/4 8&lt;/code&gt; and I add the setting command into
&lt;em&gt;rc.lua&lt;/em&gt; of &lt;a href=&#34;http://awesome.naquadah.org&#34;&gt;Awesome WM&lt;/a&gt; to apply the setting on each startup.&lt;/p&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Mouse_acceleration&#34;&gt;Mouse acceleration from ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_9&#34;&gt;INPUT METHOD&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;ibus + isbus-rime&lt;/strong&gt; combinations works nicely on my Arch Linux.&lt;/p&gt;

&lt;p&gt;After ibus gets installed, run &lt;code&gt;ibus-setup&lt;/code&gt;, it will show a setting guide
window where you can adjust ibus settings to adapt to &lt;a href=&#34;awesome&#34;&gt;Awesome WM&lt;/a&gt;
environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I prefer to change the keyboard shortcut of switching to next input method to
&lt;code&gt;&amp;lt;Atl&amp;gt;&amp;lt;Shift&amp;gt;space&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check off the &lt;em&gt;Embed preedit text in application window&lt;/em&gt; option, because I
found it does not run properly in some applications (e.g. Vim).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On  environments, ibus-daemon can not be loaded automatically on
startup, so we need to manually run it. There are many ways to auto-start
applications on linux platform, I choose to let &lt;a href=&#34;awesome&#34;&gt;Awesome WM&lt;/a&gt; to start it by adding
auto-start code in &lt;em&gt;rc.lua&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For ibus-rime, it is in tranditional chinese mode by default. To switch to
simplified chinese mode, press &lt;code&gt;Ctrl-~&lt;/code&gt; when ibus-rime is active to open setup
candiate menu and choose &lt;em&gt;朙月拼音-简化字&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S ibus ibus-qt ibus-rime

ibus-setup

# manually start ibus daemon for this session.
# this command has been added in my Awesome config file &#39;rc.lua&#39; to auto-start
# it in the beginning of each Awesome session.
ibus-daemon -drx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Ibus&#34;&gt;IBus from ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_10&#34;&gt;WINDOW MANAGER&lt;/h1&gt;

&lt;p&gt;On Linux platforms, I prefer WMs to DEs.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://awesome.naquadah.org&#34;&gt;Awesome WM&lt;/a&gt; is my favorite window manager.&lt;/p&gt;

&lt;p&gt;see &lt;a href=&#34;/memo/setup_my_aweseome_wm_environment/&#34;&gt;SETUP MY AWESOME WM ENVIRONMENT&lt;/a&gt;
for details.&lt;/p&gt;

&lt;h1 id=&#34;toc_11&#34;&gt;SHELL ENVIRONMENT&lt;/h1&gt;

&lt;p&gt;I have used several terminal emulators (gnome-terminal, xvrt &amp;hellip;), and finally
I settled myself on &lt;strong&gt;xterm&lt;/strong&gt;, which I feel it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;consume the smallest resource among other terminal emulators.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;starts up very fast.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is much more robust.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is the standard shell for the X Window System, which bring a great
compatiblity.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As to shells, I become a &lt;strong&gt;zsh&lt;/strong&gt; fan soon after played with it as well as
bash &amp;amp; fish shells. the reason is obvious:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;it is powerfull than bash, whose syntax is completely covered by zsh.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;it provides more flexibility in configuration than fish shell.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;there already exist quite a many user contributed resources on the net, e.g:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;on-my-zsh&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/zsh-users/antigen&#34;&gt;antigen&lt;/a&gt; plugin manager.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Pull down dot-files repo&lt;/h2&gt;

&lt;p&gt;My configuration resource related to termianl emulator &amp;amp; shells are managed in
a github repo &amp;ndash; &lt;a href=&#34;https://github.com/Mudox/dot-files.git&#34;&gt;dot-files&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/Git # ~/Git is the place I assemble most of my github repos.
git clone https://github.com/Mudox/dot-files.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;Setup xterm&lt;/h2&gt;

&lt;p&gt;First, install xterm from Arch Linux&amp;rsquo;s official repository.&lt;/p&gt;

&lt;p&gt;Then, link out the .Xresources file from my &lt;a href=&#34;https://github.com/Mudox/dot-files.git&#34;&gt;dot-files&lt;/a&gt; repo. It is
the configuration file that hold my xterm settings (colors, cursors, fonts
etc.) among other x utility setttings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S xterm
cd ~
ln -sf Git/dot-files/Xresources .Xresources
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Setup zsh&lt;/h2&gt;

&lt;p&gt;see &lt;a href=&#34;/memo/setup_my_zsh_environment/&#34;&gt;SETUP MY ZSH ENVIRONMENTS&lt;/a&gt; for details.&lt;/p&gt;

&lt;h1 id=&#34;toc_15&#34;&gt;SETUP VIRTUALBOX&lt;/h1&gt;

&lt;h2 id=&#34;toc_16&#34;&gt;Installing Virtualbox&lt;/h2&gt;

&lt;p&gt;First, from the official repository, install &lt;code&gt;virtualbox&lt;/code&gt; package, which comes
with &lt;code&gt;virtualbox-host-modules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we need to add the basic &lt;strong&gt;vboxdrv&lt;/strong&gt; kernel module to host kernel.&lt;/p&gt;

&lt;p&gt;Finally, add my user name to the &lt;strong&gt;vboxusers&lt;/strong&gt; group in order to use USB port in
virtual machines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S virtualbox

# manually add vboxdrv to host kernel for one time.
sudo modeprobe vboxdrv

# auto-load vboxdrv on every system startup.
sudo echo &#39;vboxdrv&#39; &amp;gt; /etc/modules-load.d/virtualbox.conf

# add user name in vboxusers group to use USB ports in vitual machines.
sudo gpasswd -a &amp;quot;${USER}&amp;quot; vboxusers
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_17&#34;&gt;Configuring Virtualbox&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Set &lt;em&gt;Host Key Combination&lt;/em&gt; to &lt;code&gt;right &amp;lt;winkey&amp;gt;&lt;/code&gt; which is consistent with
&lt;a href=&#34;awesome&#34;&gt;Awesome WM&lt;/a&gt;&amp;rsquo;s keyboads shortcuts, it&amp;rsquo;s in
&lt;em&gt;File-&amp;gt;Preference-&amp;gt;Input-&amp;gt;Virtual Machine&lt;/em&gt; of &lt;em&gt;Oracle VM VitualBox Manager&lt;/em&gt;
window.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enalbe &lt;em&gt;Bidiretional clipboard&lt;/em&gt;, it&amp;rsquo;s in &lt;em&gt;Devices-&amp;gt;Shared
Clipboard-&amp;gt;Bidirectional&lt;/em&gt; of virtual machine window.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Virtualbox&#34;&gt;Virtualbox from ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Kernel_modules&#34;&gt;kernel_modules from ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_18&#34;&gt;VPN&lt;/h1&gt;

&lt;h2 id=&#34;toc_19&#34;&gt;Setup pptpclient&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;install pptpclient from the official repository of Arch Linux.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use &lt;code&gt;pptpsetup&lt;/code&gt; command to register my VPN account, which is just a helper
script that will create a readable text file &lt;code&gt;/etc/ppp/peers/&amp;lt;tunnel_name&amp;gt;&lt;/code&gt;
where you can change the server address manaually using whatever text editor
you like. collect the following information in advance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VPN server&amp;rsquo;s &lt;strong&gt;ip address&lt;/strong&gt; from your VPN provider.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;user name&lt;/strong&gt; of your VPN account.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;user password&lt;/strong&gt; of your VPN account.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;install &lt;code&gt;ppp-mppe&lt;/code&gt; (i.e. Microsoft Pointer-to-Pointer Encryption), if the
&lt;code&gt;pptpsetup&lt;/code&gt; command complains about &lt;em&gt;MPPE&lt;/em&gt; module things.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;test configuration&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;use &lt;code&gt;pon &amp;lt;tunnel_name&amp;gt; debug dump logfd 2 nodetach&lt;/code&gt; to test the
configuration. If everything has been configured correctly, the command
should not terminate. &lt;code&gt;Ctrl-C&lt;/code&gt; to quit it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;type &lt;code&gt;ip addr show&lt;/code&gt;, and you will see a new device &lt;strong&gt;ppp0&lt;/strong&gt; is listed in.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;connect VPN using &lt;code&gt;sudo pon &amp;lt;tunnel_name&amp;gt;&lt;/code&gt;, &lt;code&gt;sudo poff &amp;lt;tunnel_name&amp;gt;&lt;/code&gt; to
tear down.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install pptpclient
sudo pacman -S pptpclient

# add you VPN account (i.e. create a new tunnel)
sudo pptpsetup \
  --create &amp;lt;tunnel_name_whatever_you_like&amp;gt; \
  --server &amp;lt;your_VPN_server_ip_address&amp;gt; \
  --username &amp;lt;username_of_you_VPN_account&amp;gt; \
  --password &amp;lt;password_of_you_VPN_account&amp;gt; \
  --encrypt

# install ppp-mppe, if the command above complains about lacking of `MPPE`
# module things. rerun `pptpsetup` command above after installing it.
sudo pacman -S ppp-mppe

# test 1, the command should not terminate if everything is okay.
sudo pon &amp;lt;tunnel_name_above&amp;gt; debug dump logfd 2 nodetach

# test 2, you would see `ppp0` listed in the output.
ip addr show

# finally, connect!
sudo pon &amp;lt;tunnel_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_20&#34;&gt;Route all traffic through VPN connection&lt;/h2&gt;

&lt;h3 id=&#34;toc_21&#34;&gt;Manually&lt;/h3&gt;

&lt;p&gt;Use the powerfull &lt;code&gt;ip&lt;/code&gt; command to add a route rule into route table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make all packages go through interface ppp0
ip route add default dev ppp0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This route rule is only effective during this ppp session. after your tear down
the VPN connection by &lt;code&gt;sudo pon &amp;lt;tunnel_name&amp;gt;&lt;/code&gt;, it will vanish.&lt;/p&gt;

&lt;h3 id=&#34;toc_22&#34;&gt;Automatically&lt;/h3&gt;

&lt;p&gt;Every executable scripts under /etc/ppp/ip-up.d/ will be called when a VPN
connection startup. Hence, we can use it to automatically set route rules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /etc/ppp/ip-up.d/01-routes.sh
# ----------------------------------------
#!/bin/bash

# This script is called with the following arguments:
# Arg Name
# $1 Interface name
# $2 The tty
# $3 The link speed
# $4 Local IP number
# $5 Peer IP number
# $6 Optional ``ipparam&#39;&#39; value foo

ip route add default via $4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /etc/ppp/ip-up.d
echo &#39;ip route add default via $4&#39; &amp;gt; 01-routes.sh

# the script file need to have `x` permission to be run.
# it&#39;s stdin &amp;amp; stderr will be redirected off terminal, so not output will
# be shown when run.
co
sudo chmod +x /etc/ppp/ip-up.d/01-routes.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_23&#34;&gt;Modify DNS server list&lt;/h2&gt;

&lt;p&gt;If you found you still can not access some site (e.g. youtube, twitter, etc.)
after establishing the VPN connection, then you should insert &lt;code&gt;servername
8.8.8.8&lt;/code&gt; ahead of existing lines in &lt;em&gt;/etc/resolve.conf&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /etc/resolve.conf
# ----------------------------------------
nameserver 8.8.8.8
nameserver 192.168.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_24&#34;&gt;My hacky way&lt;/h3&gt;

&lt;p&gt;I wrote a script to get around of this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ~/.bin/vpn.sh
# ----------------------------------------
#!/bin/sh

tunnel=&amp;quot;your configured tunnel name&amp;quot;

if [ &amp;quot;$#&amp;quot; -ne 1 ]; then
  echo &amp;quot;usage: $0 [on|off]&amp;quot;
  exit 1
fi

case &amp;quot;$1&amp;quot; in
  on )
    # connect
    pon ${tunnel} || exit 1

    # here we just overwrite the /etc/resolv.conf by `echo`ing the hard
    # written DNS list to it.
    printf &amp;quot;nameserver 8.8.8.8\nnameserver 192.168.0.1&amp;quot; &amp;gt; /etc/resolv.conf || exit 1
    ;;
  off )
    # disconnect
    poff ${tunnel}

    # some as above, we just `echo` back.
    echo &#39;nameserver 192.168.0.1&#39; &amp;gt; /etc/resolv.conf || exit 1
    ;;
  * )
    echo &amp;quot;usage: $0 [on|off]&amp;quot;
    ;;
esac

unset tunnel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in your .bashrc or .zshrc file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias vpon=&#39;sudo ~/.bin/vpn.sh on&#39;
alias vpoff=&#39;sudo ~/.bin/vpn.sh off&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then, you can type &lt;code&gt;vpon&lt;/code&gt; to turn on the VPN, and &lt;code&gt;vpoff&lt;/code&gt; to shutdown.&lt;/p&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/PPTP_VPN_client_setup_with_pptpclient&#34;&gt;PPTP VPN client setup with pptpclient&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY VIM ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_vim_environment/</link>
      <pubDate>Sat, 08 Nov 2014 17:40:55 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_vim_environment/</guid>
      <description>

&lt;p&gt;It is the Vim that bring we into the marvelous OSS world. Fiddling with it is
full of surprise and happy.&lt;/p&gt;

&lt;p&gt;Below records my steps of setting up my Vim environment after every system
re-installation.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Installing Vim&lt;/h1&gt;

&lt;p&gt;my vim config have be tested on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows XP and above.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mac OSX 10.9 and above using &lt;a href=&#34;https://github.com/b4winckler/macvim&#34;&gt;MacVim&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Arch Linux.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: currently I prefer to GUI version than terminal version, hence most
of my configurations are tailored to GUI environments.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Setup My Vim-Config Repo&lt;/h1&gt;

&lt;p&gt;First pull down my &lt;a href=&#34;https://github.com/Mudox/vim-config&#34;&gt;vim-config&lt;/a&gt; repo from github.&lt;/p&gt;

&lt;p&gt;Then create a directory named &lt;em&gt;neobundle&lt;/em&gt; under the pulled down repo, which
will holds almost all vim plugins that will be synced by &lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt;
later.&lt;/p&gt;

&lt;p&gt;Create the initial &lt;em&gt;cur_mode&lt;/em&gt; file under &lt;em&gt;.vim/chameleon/&lt;/em&gt;, which always stores
the chameleon mode of next vim session.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# On Widnows, Must Be Put In C:/Documents And Settings/&amp;lt;User Name&amp;gt;/Vimfiles
git clone https://github.com/Mudox/vim-config.git ~/.vim

cd .vim
mkdir neobundle

cd chameleon
echo &#39;all&#39; &amp;gt; cur_mode
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Install Prerequisites Vim Plugins&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Install &lt;a href=&#34;https://github.com/Mudox/vim-chameleon&#34;&gt;vim-chameleon&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Mudox/vim-chameleon&#34;&gt;vim-chameleon&lt;/a&gt; is my own plugin for managing massive and ever
growing vim &amp;amp; vim plugin configurations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.vim/neobundle
# NOTE: The Renaming Is Important
git clone https://github.com/Mudox/vim-chameleon chameleon
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Install &lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt; is a sophisticated vim plugin manager that I have been
using for a long time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.vim/neobundle
# NOTE: The Renaming Is Important
git clone https://github.com/Shougo/neobundle.vim neobundle
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Install &amp;amp; compile &lt;a href=&#34;https://github.com/Shougo/vimproc.vim&#34;&gt;vimproc&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/vimproc.vim&#34;&gt;vimproc&lt;/a&gt; is another plugin written by &lt;a href=&#34;https://github.com/Shougo&#34;&gt;Shougo&lt;/a&gt; that is very
useful, and is required by &lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt;. The point is that you need to
compile it to get a dynamic library after pulling down its&amp;rsquo; repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.vim/neobundle
# NOTE: The Renaming Is Important
git clone https://github.com/Shougo/vimproc.vim vimproc

cd vimproc
make # see vimproc/README.md for compilation commands for various platforms.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Run vim to see all other 140+ plugins get installed.&lt;/h2&gt;

&lt;p&gt;You can run vim in terminals or open gVim. Better run vim in terminal to watch
the plugins installing progress and spot any errors clearly.&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Vim Environment For Specific Use Case&lt;/h1&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Web Developing&lt;/h2&gt;

&lt;p&gt;Node.js (and NPM which comes with it) is the essentials of everything below.&lt;/p&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;HTML&lt;/h3&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;I use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/jshint/jshint&#34;&gt;jshint&lt;/a&gt; &amp;amp;
&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;eshint&lt;/a&gt; &amp;amp;
&lt;a href=&#34;https://github.com/douglascrockford/JSLint.git&#34;&gt;jslint&lt;/a&gt; for &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt;
checkers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/beautify-web/js-beautify&#34;&gt;js-beautify&lt;/a&gt; to prettify
JavaScript code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install jshint -g
npm install jslint -g
npm install eslint -g
npm install js-beautify -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;CSS&lt;/h3&gt;

&lt;p&gt;I use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/CSSLint/csslint&#34;&gt;csslint&lt;/a&gt; for &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt; checkers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/csscomb/csscomb.js&#34;&gt;csscomb.js&lt;/a&gt; for CSS code prettifier.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm intall csslint -g
npm install csscomb -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Python Scripting&lt;/h2&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;Lua Scripting&lt;/h2&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Go Scripting&lt;/h2&gt;

&lt;h2 id=&#34;toc_15&#34;&gt;C/C++ Coding&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>ERROR COLLECTION - JAVASCRIPT</title>
      <link>http://localhost:1313/memo/error_collection_javascript/</link>
      <pubDate>Fri, 07 Nov 2014 09:24:33 CST</pubDate>
      
      <guid>http://localhost:1313/memo/error_collection_javascript/</guid>
      <description>&lt;p&gt;Errors that I collected day by day when writing the JavaScript language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when assign a function to a event property, dot not appending &lt;code&gt;()&lt;/code&gt; to the function name.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;window.onload = init/*()*/

function init() {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;appending &lt;code&gt;()&lt;/code&gt; to a property name.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var x = Math.floor(Math.random() * canvas.width/*()*/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(this)&lt;/code&gt; not &lt;code&gt;$(&amp;quot;this&amp;quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ERROR COLLECTION - BASH</title>
      <link>http://localhost:1313/memo/error_collection_bash/</link>
      <pubDate>Fri, 07 Nov 2014 09:24:33 CST</pubDate>
      
      <guid>http://localhost:1313/memo/error_collection_bash/</guid>
      <description>&lt;p&gt;Errors that I collected day by day, when writing the Bash scripting language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Body of &lt;code&gt;select&lt;/code&gt; constructs need a &lt;code&gt;break;&lt;/code&gt; to quit the selection loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;select answer in #choices#; do
  #body#
  break; # &amp;lt;- go out of selection loop.
done
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always &lt;code&gt;source&lt;/code&gt; before testing a updated command.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Whence quoted with &lt;code&gt;&amp;quot;&lt;/code&gt;, which is the most case, use the &lt;code&gt;@&lt;/code&gt; form (i.e.
&lt;code&gt;&amp;quot;${ARRAY[@]}&amp;quot;&lt;/code&gt;) to expand a array correctly. The &lt;code&gt;*&lt;/code&gt; form will make the
expanded string as a &lt;strong&gt;single word&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;local path&lt;/code&gt; is the source of all evil. It will shaddow the global &lt;code&gt;path&lt;/code&gt;
where binary search paths is hold in zsh.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;No need to &lt;code&gt;&amp;quot;&lt;/code&gt; quote variable that expand to a number in &lt;code&gt;$(( ))&lt;/code&gt;, which need
a real number.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;index=$(( RANDOM % &amp;quot;${#array[@]}&amp;quot; )) # no need to double quote &#39;${array[@]}&#39; here
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ERROR COLLECTION - BASH</title>
      <link>http://localhost:1313/memo/error_collection_sh/</link>
      <pubDate>Fri, 07 Nov 2014 09:24:33 CST</pubDate>
      
      <guid>http://localhost:1313/memo/error_collection_sh/</guid>
      <description>&lt;p&gt;Errors that I collected day by day, when writing the Bash scripting language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Body of &lt;code&gt;select&lt;/code&gt; constructs need a &lt;code&gt;break;&lt;/code&gt; to quit the selection loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;select answer in #choices#; do
  #body#
  break; # &amp;lt;- go out of selection loop.
done
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always &lt;code&gt;source&lt;/code&gt; before testing a updated command.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Whence quoted with &lt;code&gt;&amp;quot;&lt;/code&gt;, which is the most case, use the &lt;code&gt;@&lt;/code&gt; form (i.e.
&lt;code&gt;&amp;quot;${ARRAY[@]}&amp;quot;&lt;/code&gt;) to expand a array correctly. The &lt;code&gt;*&lt;/code&gt; form will make the
expanded string as a &lt;strong&gt;single word&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY ZSH ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_zsh_environment/</link>
      <pubDate>Wed, 05 Nov 2014 09:34:11 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_zsh_environment/</guid>
      <description>

&lt;p&gt;Steps of setting up zsh environment on my systems (Arch Linux, MacOS,
Windows/Cygwin).&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;the &lt;code&gt;z&lt;/code&gt; command&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;the &lt;code&gt;fzf&lt;/code&gt; command&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY AWESOME WM ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_aweseome_wm_environment/</link>
      <pubDate>Wed, 05 Nov 2014 09:28:07 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_aweseome_wm_environment/</guid>
      <description>

&lt;p&gt;Awesome WM let you maniplate system windows like using Vim, besides its
bleeding fast window UI rendering &amp;amp; switching speed on *nix platform I&amp;rsquo;ve ever
seen.&lt;/p&gt;

&lt;p&gt;Below records my steps of setting up the Awesome window manager on my Arch
Linux progressively.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Installing Awesome Packages&lt;/h1&gt;

&lt;p&gt;The awesome package is in the official repository of Arch Linux.&lt;/p&gt;

&lt;p&gt;Better install Xephyr for testing cases.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S awesome xorg-xephyr
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Pulling Down My Awesome-Config Repository&lt;/h1&gt;

&lt;p&gt;The pulled down repo must be put in ~/.config/awesome, where awesome will
correctly load the configuration resources.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/.config # if .config does not exist before.
cd ~/.config
git clone https://github.com/Mudox/awesome-config.git awesome
cd awesome
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>