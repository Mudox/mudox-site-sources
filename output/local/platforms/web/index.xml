<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Web on Mudox </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/platforms/web/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Mon, 13 Apr 2015 18:10:59 CST</updated>
    
    <item>
      <title>UNICODE CONCEPTS DEFINED</title>
      <link>http://localhost:1313/note/unicode_concepts_defined/</link>
      <pubDate>Mon, 13 Apr 2015 18:10:59 CST</pubDate>
      
      <guid>http://localhost:1313/note/unicode_concepts_defined/</guid>
      <description>&lt;p&gt;Collect several Unicode concepts encountered when I learn Swift&amp;rsquo;s String type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;UCS&lt;/p&gt;

&lt;p&gt;Universal Coded Character Set (通用字符集)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Universal Coded Character Set (UCS), defined by the International
Standard ISO/IEC 10646, Information technology — Universal Coded
Character Set (UCS) (plus amendments to that standard), is a standard set
of characters upon which many character encodings are based. The UCS
contains nearly one hundred thousand abstract characters, each identified
by an unambiguous name and an integer number called its code point.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unicode&lt;/p&gt;

&lt;p&gt;统一码，万国码, 单一码&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unicode is a computing industry standard for the consistent encoding,
representation, and handling of text expressed in most of the world&amp;rsquo;s
writing systems. Developed in conjunction with the Universal Character
Set standard and published as The Unicode Standard, the latest version of
Unicode contains a repertoire of more than 110,000 characters covering
100 scripts and multiple symbol sets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As for its&amp;rsquo; code space layout:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unicode comprises 1,114,112 code points in the range 0x0 to 0x10FFFF.
The Unicode code space is divided into 17 planes (the basic multilingual
plane, and 16 supplementary planes), each with 65,536 (= 216) code
points. Thus the total size of the Unicode code space is 17 × 65,536 =
1,114,112.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UTF&lt;/p&gt;

&lt;p&gt;UCS/Unicode Transformation Format (通用字符集转换格式, Unicode 转换格式)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UTF-8&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;UTF-8 (U from Universal Character Set + Transformation Format—8-bit[1])
is a character encoding capable of encoding all possible characters
(called code points) in Unicode. The encoding is variable-length and uses
8-bit code units. It was designed for backward compatibility with ASCII
and to avoid the complications of endianness and byte order marks in
UTF-16 and UTF-32.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;code point (code position)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In character encoding terminology, a code point or code position is any
of the numerical values that make up the code space.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unicode scalar&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Behind the scenes, Swift’s native String type is built from Unicode
scalar values. A Unicode scalar is a unique 21-bit number for a character
or modifier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The distinction between Unicode scalar &amp;amp; Unicode code point could be
clarified as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Unicode scalar is any Unicode code point in the range U+0000 to U+D7FF
inclusive or U+E000 to U+10FFFF inclusive. Unicode scalars do not include
the Unicode surrogate pair code points, which are the code points in the
range U+D800 to U+DFFF inclusive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is a Swift language specific notion, or more actually, a Swift defined
internal type for storing string charactor&amp;rsquo;s Unicode points that Swift
choose to support. Behind the scene, it&amp;rsquo;s a 21bit long numeric type, but
not all number in the range can reponds to a valid Unicode point.&lt;/p&gt;

&lt;p&gt;So mathematically, the Unicode points universal set is a discrete subset of
integer set [0, 0x10FFFF]. The Swift Unicode scalar universal set is, in
turn, a discrete subset of Unicode code point universal set (with all
&lt;em&gt;surroagte pair&lt;/em&gt; code points stripped).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;code unit&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A code unit is a bit sequence used to encode each character of a
repertoire. Encodings associate their meaning with either a single code
unit value or a sequence of code units as one value.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;extended grapheme cluster&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every instance of Swift’s Character type represents a single extended
grapheme cluster. An extended grapheme cluster is a sequence of one or
more Unicode scalars that (when combined) produce a single human-readable
character.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ERROR COLLECTION - JAVASCRIPT</title>
      <link>http://localhost:1313/memo/error_collection_javascript/</link>
      <pubDate>Fri, 07 Nov 2014 09:24:33 CST</pubDate>
      
      <guid>http://localhost:1313/memo/error_collection_javascript/</guid>
      <description>&lt;p&gt;Errors that I collected day by day when writing the JavaScript language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when assign a function to a event property, dot not appending &lt;code&gt;()&lt;/code&gt; to the function name.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;window.onload = init/*()*/

function init() {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;appending &lt;code&gt;()&lt;/code&gt; to a property name.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var x = Math.floor(Math.random() * canvas.width/*()*/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(this)&lt;/code&gt; not &lt;code&gt;$(&amp;quot;this&amp;quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JAVASCRIPT TYPE CONVERSIONS</title>
      <link>http://localhost:1313/note/javascript_type_conversions/</link>
      <pubDate>Tue, 28 Oct 2014 11:33:15 CST</pubDate>
      
      <guid>http://localhost:1313/note/javascript_type_conversions/</guid>
      <description>

&lt;p&gt;Here records what I learned about JavaScript&amp;rsquo;s type conversion.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Sepcial Value Or Types In JavaScript&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The &lt;code&gt;undefined&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;undefined&lt;/code&gt; is the only value of &lt;code&gt;undefined&lt;/code&gt;, represents unknown value of any
other types, including primitive types &amp;amp; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// play with &#39;undefined&#39;
typeof undefiend                  /* undfeined        */
undefined == undefined            /* true             */
undefined == null                 /* true             */
undefined !== null                /* true             */
Boolean(undefined)                /* false            */
Number(undefined)                 /* NaN              */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;The &lt;code&gt;null&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;null&lt;/code&gt;, by standards, should be the only value of &lt;code&gt;null&lt;/code&gt; type, but in certain
browser (e.g. firfox, chrome), it is of type &lt;code&gt;object&lt;/code&gt;. &lt;code&gt;null&lt;/code&gt; is used to
represent unknown value of an object.&lt;/p&gt;

&lt;p&gt;It is equal to itself and it is equal to &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// play with &#39;null&#39;
typeof null                       /* object           */
null == null                      /* true             */
null == undefined                 /* true             */
null !== undefined                /* true             */
Boolean(null)                     /* false            */
Number(null)                      /* 0                */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;The &lt;code&gt;NaN&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;NaN&lt;/code&gt; is a &lt;code&gt;Number&lt;/code&gt; that can not be represented as a number.&lt;/p&gt;

&lt;p&gt;It dose &lt;strong&gt;NOT&lt;/strong&gt; equal to itself, hence JavaScript provide a built-in function
&lt;code&gt;isNaN()&lt;/code&gt; to test if a value is a NaN.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascri&#34;&gt;// play with &#39;NaN&#39;
typeof NaN                        /* number           */
NaN == NaN                        /* false            */
NaN == undefined                  /* false            */
NaN == null                       /* false            */
Boolean(NaN)                      /* false            */
Number(NaN)                       /* NaN              */
isNaN(NaN)                        /* true             */
NaN == 0/0                        /* true             */
isNaN(0/0)                        /* true             */
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Implicit Type Conversions&lt;/h1&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;When other types need to be converted into a number&lt;/h2&gt;

&lt;p&gt;When different types are mixed in a relational operation (i.e &lt;code&gt;== != &amp;lt; &amp;lt;= &amp;gt;
&amp;gt;=&lt;/code&gt;) except the &lt;code&gt;===&lt;/code&gt; operator, or an arithmetic operation, except
the &lt;code&gt;+&lt;/code&gt; operator, they would be converted into numbers first.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;For Boolean:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;true would be converted to 1&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;false would be converted to 0&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;For String:&lt;/h3&gt;

&lt;p&gt;It is converted literally, i.e.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#39;2014&#39; &amp;lt; 2 /* 2014 &amp;lt; 2 yields false */
&#39;3.1415&#39; == 3.1415 /* 3.1415 == 3.1415 yields true */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is one exception: a &lt;code&gt;emtpy&lt;/code&gt; string would be converted to 0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var emptyText = &#39;&#39;;

/* &#39;emptyText&#39; here, converetd to 0, is compared to true which is converted to 1,
and then &#39;!&#39; negates the results to true */
if (!emptyText) {
  console.log(&#39;empty text is not true!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;When other types need to be converted into a string&lt;/h2&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;The special &lt;code&gt;+&lt;/code&gt; operator&lt;/h3&gt;

&lt;p&gt;In JavaScript, the &lt;code&gt;+&lt;/code&gt; is first a string concatenation operator, then a
arithmetic addition operator.&lt;/p&gt;

&lt;p&gt;When one of &lt;code&gt;+&lt;/code&gt;&amp;rsquo;s operands is a string, JavaScript will try to convert the
other operand into a string, and perform a concatenation operation.&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;For Boolean:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;true&lt;/code&gt; would be conveted bo &amp;ldquo;true&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;false&lt;/code&gt; would be conveted to &amp;ldquo;false&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;For &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; &amp;amp; &lt;code&gt;NaN&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;they all be converted literally.&lt;/p&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;When other types need to be converted into a boolean value&lt;/h2&gt;

&lt;p&gt;from 《Head First JavaScript Programming》:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the secret to learning what is truthy and what is falsey is to learn what’s
falsey, and then consider everything else truthy.
concentrate on  knowing what is falsey, and then everything else you can
consider truthy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;it is a golden rule that also applys in many other programming language
learning situations.&lt;/p&gt;

&lt;p&gt;As to what value should be considered as falsey, different language has
different policy. There are &lt;strong&gt;5&lt;/strong&gt; falsey value in JavaScript:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WEB PAGE LAYOUTS</title>
      <link>http://localhost:1313/note/web_page_layouts/</link>
      <pubDate>Sun, 26 Oct 2014 21:36:29 CST</pubDate>
      
      <guid>http://localhost:1313/note/web_page_layouts/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Liquid Layout&lt;/h1&gt;

&lt;p&gt;This is the browser&amp;rsquo;s default layout behavior, if you did not add any CSS to
style a page. The block elements, like liquid, just fill as much space as they
can in the pages.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Frozen Layout&lt;/h1&gt;

&lt;p&gt;By using the CSS attribute combination of &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt;, we can put a
&lt;strong&gt;containing&lt;/strong&gt; block (i.e. &lt;code&gt;&amp;lt;seciton&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;) to float on to
left-most or right-most side forming a &lt;strong&gt;column&lt;/strong&gt;, and let the  remaining
content to flow around the fixed-width floating column, forming the other
column.&lt;/p&gt;

&lt;p&gt;Use CSS attribute &lt;code&gt;clear: [left | right]&lt;/code&gt; to let a block to layout fully
underneath a floating elements.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Jello Layout&lt;/h1&gt;

&lt;p&gt;On the basis of frozen layout, we can use containing fixed-width block to wrap
all columns (floating or flowing), and by using &lt;code&gt;margin-left: auto;
margin-right: auto;&lt;/code&gt; CSS style, to center the contained columns in the page.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Absolute Position&lt;/h1&gt;

&lt;p&gt;By using the CSS attribute combination of &lt;code&gt;position: [absolute | fixed]&lt;/code&gt; and
&lt;code&gt;left | right | top | bottom: ...&lt;/code&gt;, we can take the column fully out of layout
flow, and fix their position relative to the page (&lt;code&gt;position: absolute&lt;/code&gt;), or to
the viewport (&lt;code&gt;position: fixed&lt;/code&gt;).&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Table Display&lt;/h1&gt;

&lt;p&gt;Use CSS attribute &lt;code&gt;display: [table | table-row | table-cell]&lt;/code&gt; to organize HTML
elements into an invisible table.&lt;/p&gt;

&lt;p&gt;Most of the time, &lt;code&gt;vertical-align: top&lt;/code&gt; will help you to get what you want to see.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>