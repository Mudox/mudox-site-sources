<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Win on Mudox </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/platforms/win/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Mon, 13 Apr 2015 18:10:59 CST</updated>
    
    <item>
      <title>UNICODE CONCEPTS DEFINED</title>
      <link>http://localhost:1313/note/unicode_concepts_defined/</link>
      <pubDate>Mon, 13 Apr 2015 18:10:59 CST</pubDate>
      
      <guid>http://localhost:1313/note/unicode_concepts_defined/</guid>
      <description>&lt;p&gt;Collect several Unicode concepts encountered when I learn Swift&amp;rsquo;s String type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;UCS&lt;/p&gt;

&lt;p&gt;Universal Coded Character Set (通用字符集)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Universal Coded Character Set (UCS), defined by the International
Standard ISO/IEC 10646, Information technology — Universal Coded
Character Set (UCS) (plus amendments to that standard), is a standard set
of characters upon which many character encodings are based. The UCS
contains nearly one hundred thousand abstract characters, each identified
by an unambiguous name and an integer number called its code point.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unicode&lt;/p&gt;

&lt;p&gt;统一码，万国码, 单一码&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unicode is a computing industry standard for the consistent encoding,
representation, and handling of text expressed in most of the world&amp;rsquo;s
writing systems. Developed in conjunction with the Universal Character
Set standard and published as The Unicode Standard, the latest version of
Unicode contains a repertoire of more than 110,000 characters covering
100 scripts and multiple symbol sets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As for its&amp;rsquo; code space layout:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unicode comprises 1,114,112 code points in the range 0x0 to 0x10FFFF.
The Unicode code space is divided into 17 planes (the basic multilingual
plane, and 16 supplementary planes), each with 65,536 (= 216) code
points. Thus the total size of the Unicode code space is 17 × 65,536 =
1,114,112.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UTF&lt;/p&gt;

&lt;p&gt;UCS/Unicode Transformation Format (通用字符集转换格式, Unicode 转换格式)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UTF-8&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;UTF-8 (U from Universal Character Set + Transformation Format—8-bit[1])
is a character encoding capable of encoding all possible characters
(called code points) in Unicode. The encoding is variable-length and uses
8-bit code units. It was designed for backward compatibility with ASCII
and to avoid the complications of endianness and byte order marks in
UTF-16 and UTF-32.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;code point (code position)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In character encoding terminology, a code point or code position is any
of the numerical values that make up the code space.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unicode scalar&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Behind the scenes, Swift’s native String type is built from Unicode
scalar values. A Unicode scalar is a unique 21-bit number for a character
or modifier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The distinction between Unicode scalar &amp;amp; Unicode code point could be
clarified as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Unicode scalar is any Unicode code point in the range U+0000 to U+D7FF
inclusive or U+E000 to U+10FFFF inclusive. Unicode scalars do not include
the Unicode surrogate pair code points, which are the code points in the
range U+D800 to U+DFFF inclusive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is a Swift language specific notion, or more actually, a Swift defined
internal type for storing string charactor&amp;rsquo;s Unicode points that Swift
choose to support. Behind the scene, it&amp;rsquo;s a 21bit long numeric type, but
not all number in the range can reponds to a valid Unicode point.&lt;/p&gt;

&lt;p&gt;So mathematically, the Unicode points universal set is a discrete subset of
integer set [0, 0x10FFFF]. The Swift Unicode scalar universal set is, in
turn, a discrete subset of Unicode code point universal set (with all
&lt;em&gt;surroagte pair&lt;/em&gt; code points stripped).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;code unit&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A code unit is a bit sequence used to encode each character of a
repertoire. Encodings associate their meaning with either a single code
unit value or a sequence of code units as one value.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;extended grapheme cluster&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every instance of Swift’s Character type represents a single extended
grapheme cluster. An extended grapheme cluster is a sequence of one or
more Unicode scalars that (when combined) produce a single human-readable
character.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY VIM ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_vim_environment/</link>
      <pubDate>Sat, 08 Nov 2014 17:40:55 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_vim_environment/</guid>
      <description>

&lt;p&gt;It is the Vim that bring we into the marvelous OSS world. Fiddling with it is
full of surprise and happy.&lt;/p&gt;

&lt;p&gt;Below records my steps of setting up my Vim environment after every system
re-installation.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Installing Vim&lt;/h1&gt;

&lt;p&gt;my vim config have be tested on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows XP and above.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mac OSX 10.9 and above using &lt;a href=&#34;https://github.com/b4winckler/macvim&#34;&gt;MacVim&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Arch Linux.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: currently I prefer to GUI version than terminal version, hence most
of my configurations are tailored to GUI environments.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Setup My Vim-Config Repo&lt;/h1&gt;

&lt;p&gt;First pull down my &lt;a href=&#34;https://github.com/Mudox/vim-config&#34;&gt;vim-config&lt;/a&gt; repo from github.&lt;/p&gt;

&lt;p&gt;Then create a directory named &lt;em&gt;neobundle&lt;/em&gt; under the pulled down repo, which
will holds almost all vim plugins that will be synced by &lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt;
later.&lt;/p&gt;

&lt;p&gt;Create the initial &lt;em&gt;cur_mode&lt;/em&gt; file under &lt;em&gt;.vim/chameleon/&lt;/em&gt;, which always stores
the chameleon mode of next vim session.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# On Widnows, Must Be Put In C:/Documents And Settings/&amp;lt;User Name&amp;gt;/Vimfiles
git clone https://github.com/Mudox/vim-config.git ~/.vim

cd .vim
mkdir neobundle

cd chameleon
echo &#39;all&#39; &amp;gt; cur_mode
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Install Prerequisites Vim Plugins&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Install &lt;a href=&#34;https://github.com/Mudox/vim-chameleon&#34;&gt;vim-chameleon&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Mudox/vim-chameleon&#34;&gt;vim-chameleon&lt;/a&gt; is my own plugin for managing massive and ever
growing vim &amp;amp; vim plugin configurations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.vim/neobundle
# NOTE: The Renaming Is Important
git clone https://github.com/Mudox/vim-chameleon chameleon
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Install &lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt; is a sophisticated vim plugin manager that I have been
using for a long time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.vim/neobundle
# NOTE: The Renaming Is Important
git clone https://github.com/Shougo/neobundle.vim neobundle
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Install &amp;amp; compile &lt;a href=&#34;https://github.com/Shougo/vimproc.vim&#34;&gt;vimproc&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/vimproc.vim&#34;&gt;vimproc&lt;/a&gt; is another plugin written by &lt;a href=&#34;https://github.com/Shougo&#34;&gt;Shougo&lt;/a&gt; that is very
useful, and is required by &lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt;. The point is that you need to
compile it to get a dynamic library after pulling down its&amp;rsquo; repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.vim/neobundle
# NOTE: The Renaming Is Important
git clone https://github.com/Shougo/vimproc.vim vimproc

cd vimproc
make # see vimproc/README.md for compilation commands for various platforms.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Run vim to see all other 140+ plugins get installed.&lt;/h2&gt;

&lt;p&gt;You can run vim in terminals or open gVim. Better run vim in terminal to watch
the plugins installing progress and spot any errors clearly.&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Vim Environment For Specific Use Case&lt;/h1&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Web Developing&lt;/h2&gt;

&lt;p&gt;Node.js (and NPM which comes with it) is the essentials of everything below.&lt;/p&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;HTML&lt;/h3&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;I use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/jshint/jshint&#34;&gt;jshint&lt;/a&gt; &amp;amp;
&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;eshint&lt;/a&gt; &amp;amp;
&lt;a href=&#34;https://github.com/douglascrockford/JSLint.git&#34;&gt;jslint&lt;/a&gt; for &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt;
checkers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/beautify-web/js-beautify&#34;&gt;js-beautify&lt;/a&gt; to prettify
JavaScript code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install jshint -g
npm install jslint -g
npm install eslint -g
npm install js-beautify -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;CSS&lt;/h3&gt;

&lt;p&gt;I use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/CSSLint/csslint&#34;&gt;csslint&lt;/a&gt; for &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt; checkers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/csscomb/csscomb.js&#34;&gt;csscomb.js&lt;/a&gt; for CSS code prettifier.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm intall csslint -g
npm install csscomb -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Python Scripting&lt;/h2&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;Lua Scripting&lt;/h2&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Go Scripting&lt;/h2&gt;

&lt;h2 id=&#34;toc_15&#34;&gt;C/C++ Coding&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>ERROR COLLECTION - BASH</title>
      <link>http://localhost:1313/memo/error_collection_bash/</link>
      <pubDate>Fri, 07 Nov 2014 09:24:33 CST</pubDate>
      
      <guid>http://localhost:1313/memo/error_collection_bash/</guid>
      <description>&lt;p&gt;Errors that I collected day by day, when writing the Bash scripting language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Body of &lt;code&gt;select&lt;/code&gt; constructs need a &lt;code&gt;break;&lt;/code&gt; to quit the selection loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;select answer in #choices#; do
  #body#
  break; # &amp;lt;- go out of selection loop.
done
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always &lt;code&gt;source&lt;/code&gt; before testing a updated command.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Whence quoted with &lt;code&gt;&amp;quot;&lt;/code&gt;, which is the most case, use the &lt;code&gt;@&lt;/code&gt; form (i.e.
&lt;code&gt;&amp;quot;${ARRAY[@]}&amp;quot;&lt;/code&gt;) to expand a array correctly. The &lt;code&gt;*&lt;/code&gt; form will make the
expanded string as a &lt;strong&gt;single word&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;local path&lt;/code&gt; is the source of all evil. It will shaddow the global &lt;code&gt;path&lt;/code&gt;
where binary search paths is hold in zsh.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;No need to &lt;code&gt;&amp;quot;&lt;/code&gt; quote variable that expand to a number in &lt;code&gt;$(( ))&lt;/code&gt;, which need
a real number.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;index=$(( RANDOM % &amp;quot;${#array[@]}&amp;quot; )) # no need to double quote &#39;${array[@]}&#39; here
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ERROR COLLECTION - BASH</title>
      <link>http://localhost:1313/memo/error_collection_sh/</link>
      <pubDate>Fri, 07 Nov 2014 09:24:33 CST</pubDate>
      
      <guid>http://localhost:1313/memo/error_collection_sh/</guid>
      <description>&lt;p&gt;Errors that I collected day by day, when writing the Bash scripting language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Body of &lt;code&gt;select&lt;/code&gt; constructs need a &lt;code&gt;break;&lt;/code&gt; to quit the selection loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;select answer in #choices#; do
  #body#
  break; # &amp;lt;- go out of selection loop.
done
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always &lt;code&gt;source&lt;/code&gt; before testing a updated command.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Whence quoted with &lt;code&gt;&amp;quot;&lt;/code&gt;, which is the most case, use the &lt;code&gt;@&lt;/code&gt; form (i.e.
&lt;code&gt;&amp;quot;${ARRAY[@]}&amp;quot;&lt;/code&gt;) to expand a array correctly. The &lt;code&gt;*&lt;/code&gt; form will make the
expanded string as a &lt;strong&gt;single word&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY ZSH ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_zsh_environment/</link>
      <pubDate>Wed, 05 Nov 2014 09:34:11 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_zsh_environment/</guid>
      <description>

&lt;p&gt;Steps of setting up zsh environment on my systems (Arch Linux, MacOS,
Windows/Cygwin).&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;the &lt;code&gt;z&lt;/code&gt; command&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;the &lt;code&gt;fzf&lt;/code&gt; command&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY CYGWIN ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_cygwin_environment/</link>
      <pubDate>Wed, 05 Nov 2014 09:26:59 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_cygwin_environment/</guid>
      <description>

&lt;p&gt;Cygwin &amp;ndash; bring *nix command line user experence (paritially though) and
efficiency onto Windows.
Below is the steps of setting up the Cygwin environment on my Windows.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Why Cygwin over other tools.&lt;/h1&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Setup Cygwin&lt;/h1&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Cygwin path remapping&lt;/h2&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;mintty setting&lt;/h2&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;color&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;mintty color palette&lt;/h3&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;ls_color&lt;/h3&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;colorful manpage&lt;/h3&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;colout&lt;/h3&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;encoding&lt;/h2&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;other settings&lt;/h2&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;Shell environment setup&lt;/h2&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Cygwin package manager&lt;/h2&gt;

&lt;h1 id=&#34;toc_13&#34;&gt;Cygwin Using Tips&lt;/h1&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Working with gVim of Windows&lt;/h2&gt;

&lt;p&gt;Most of the time, I prefer gui version of Vim than terminal version for it
being free of various shackles of terminal emulator, such as key confliction,
color presentation limit, UI rendering efficiency limit, etc.&lt;/p&gt;

&lt;p&gt;First make sure a gVim instance already exists outside of Cygwin.&lt;/p&gt;

&lt;p&gt;When I need to handle off some files to gVim for Windows, I can use &lt;code&gt;--remote&lt;/code&gt;
(type &lt;code&gt;:h clientserver&lt;/code&gt; in gVim for details) command families, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias gvim=&#39;/c/Program Files/Vim/vim74/gvim.exe&#39;

gvim --remote-tab /path/of/file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will open the file in new tab of an already running gVim instance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MY VIM CUSTOMIZATION POLICY</title>
      <link>http://localhost:1313/memo/my_vim_customization_policy/</link>
      <pubDate>Thu, 30 Oct 2014 10:15:08 CST</pubDate>
      
      <guid>http://localhost:1313/memo/my_vim_customization_policy/</guid>
      <description>

&lt;p&gt;It is the Vim that bring we into the fantastic OSS world. Fiddling with it is
full of surprise and happy.&lt;/p&gt;

&lt;p&gt;Below records my thoughts and rules of customizing my Vim.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;About Mapping&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Good prefixes for normal mode mappings&lt;/h2&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;The comma &lt;code&gt;,&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;use 2 ~ 3 suffix characters, then we can get more candidates key combinations
for mapping.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;The backslash &lt;code&gt;\&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;different keyboard layouts have different locations for &lt;code&gt;\&lt;/code&gt;, so it should be
used less frequently than &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;The space key &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;the &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt; is the best prefix for normal mappings I&amp;rsquo;ve ever found. It spans
a long distance at the bottom of the keyboard, which makes it&amp;rsquo;s very easy and
comfortable to touch.&lt;/p&gt;

&lt;p&gt;currrently, I only assigned it to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kien/ctrlp.vim.git&#34;&gt;kien&amp;rsquo;s &amp;lsquo;CtrlP&amp;rsquo;&lt;/a&gt; family mappings&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Mudox/vim-omnimenu&#34;&gt;my &amp;lsquo;vim-omnimenu&amp;rsquo;&lt;/a&gt; mappings&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Mudox/vim-chameleon&#34;&gt;my &amp;lsquo;vim-chameleon&amp;rsquo;&lt;/a&gt; mappings&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;The enter &lt;code&gt;&amp;lt;Cr&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;since many vim itself and many plugin use &lt;Cr&gt;, so I should use it sparely.
when a single click of &lt;Cr&gt; is needed, you will feel a noticeable response lag.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;The backspace key &lt;code&gt;&amp;lt;BS&amp;gt;&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;by default, the &lt;code&gt;&amp;lt;BS&amp;gt;&lt;/code&gt; acts the same as &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;Ctrl-H&lt;/code&gt; and &lt;code&gt;&amp;lt;Left&amp;gt;&lt;/code&gt; keys on
normal mode. so I have substituted it with the &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; key as a main prefix.&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;other possible key for prefixes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;C-P&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;C-N&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;=&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Mapping toggling commands&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;use &lt;code&gt;co&lt;/code&gt; prefix, which is derived from &lt;a href=&#34;https://github.com/tpope/vim-unimpaired.git&#34;&gt;tpope&amp;rsquo;s &amp;lsquo;unimpaired&amp;rsquo;&lt;/a&gt; plugin.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use &lt;code&gt;,*&amp;lt;Space&amp;gt;&lt;/code&gt; pattern, which is derived from &lt;a href=&#34;https://github.com/scrooloose/nerdcommenter.git&#34;&gt;scrooloose&amp;rsquo;s &amp;lsquo;NERD commenter&amp;rsquo;&lt;/a&gt; plugin.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>GIT MISC</title>
      <link>http://localhost:1313/note/git/</link>
      <pubDate>Thu, 02 Oct 2014 03:36:12 CST</pubDate>
      
      <guid>http://localhost:1313/note/git/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Alias&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;working tree, working directory&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;index, staging area, cache, staged snapshot&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit[ted] history, commit[ted] snapshot&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The &lt;code&gt;add&lt;/code&gt; &amp;amp; &lt;code&gt;rm&lt;/code&gt; &amp;amp; &lt;code&gt;reset&lt;/code&gt; &amp;amp; &lt;code&gt;commit&lt;/code&gt; &amp;amp; &lt;code&gt;checkout&lt;/code&gt; Sub-commands.&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;between the &lt;em&gt;committed history&lt;/em&gt; &amp;amp; &lt;em&gt;staging area&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;commit&lt;/code&gt; submit changes from &lt;em&gt;staging area&lt;/em&gt; to &lt;em&gt;committed history&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;reset&lt;/code&gt; revert changes from &lt;em&gt;committed history&lt;/em&gt; back to &lt;em&gt;staging area&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;between the &lt;em&gt;staging area&lt;/em&gt; &amp;amp; &lt;em&gt;working tree&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;add&lt;/code&gt; submit changes from &lt;em&gt;working tree&lt;/em&gt; to &lt;em&gt;staging area&lt;/em&gt;, preparing
for committing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;rm&lt;/code&gt; remove file(s) from &lt;em&gt;stageing area&lt;/em&gt;, so they become &lt;em&gt;untracked&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;checkout&lt;/code&gt; restore changes from staging area or a specific commit of committed
history to &lt;em&gt;working directory&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;unstages&lt;/strong&gt; changes in staging area.
v
    git reset &lt;paths&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;or, if you ask for more, &lt;strong&gt;uncommits&lt;/strong&gt; changes in history.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset &amp;lt;commit-ish&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;rm&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;untracks&lt;/strong&gt; file(s) previously tracked in staging area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm --cache &amp;lt;paths&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;or, if you ask for more, &lt;strong&gt;removes&lt;/strong&gt; file(s) in the work directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm &amp;lt;paths&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt; vs &lt;code&gt;git checkout&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit-ish&amp;gt; &amp;lt;paths&amp;gt;&lt;/code&gt; only update &lt;em&gt;staging area&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout &amp;lt;paths&amp;gt;&lt;/code&gt; fetch &lt;code&gt;&amp;lt;paths&amp;gt;&lt;/code&gt; from &lt;em&gt;staging area&lt;/em&gt; to working
direcotry.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout &amp;lt;commit-ish&amp;gt;&lt;/code&gt; fetch &lt;code&gt;&amp;lt;paths&amp;gt;&lt;/code&gt; from &lt;em&gt;history&lt;/em&gt; to both
&lt;em&gt;index&lt;/em&gt; &amp;amp; &lt;em&gt;working direcotry&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;The &lt;code&gt;git Rebase&lt;/code&gt; Sub-command&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Advantage of &lt;code&gt;rebase&lt;/code&gt;:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;no additional merge commit&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;linear commit history&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Disadvantage of &lt;code&gt;rebase&lt;/code&gt;:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;safety&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;tracability: the evidences of merging are wiped away.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Golden rule of &lt;code&gt;git rebase&lt;/code&gt;:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;never&lt;/strong&gt; use it on &lt;strong&gt;public&lt;/strong&gt; branches.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;When to use &lt;code&gt;rebase&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Local cleanup&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Incorporating upstream changes into a feature branch&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integrating a approved feature&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;The &lt;code&gt;reset&lt;/code&gt;, &lt;code&gt;checkout&lt;/code&gt; And &lt;code&gt;revert&lt;/code&gt; Sub-commands&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;The parameters that you pass to &lt;code&gt;git reset&lt;/code&gt; and &lt;code&gt;git checkout&lt;/code&gt; determine
their scope. When you don’t include a &lt;strong&gt;&amp;lt;file path&amp;gt;&lt;/strong&gt; as a parameter, they
operate on whole commits.  Note that git revert has no file-level counterpart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;from &lt;a href=&#34;https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/commit-level-operations&#34;&gt;atlassian&amp;rsquo;s git tutorials&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Commit level operations&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git reset --[soft | mixed | hard] &amp;lt;commit-ish&amp;gt;&lt;/code&gt; &lt;strong&gt;move&lt;/strong&gt; branch tips backwards
or even forwards, while affecting &lt;em&gt;staging area&lt;/em&gt; &amp;amp; &lt;em&gt;working direcotry&lt;/em&gt; according to
options it is given.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;option&lt;/th&gt;
&lt;th&gt;history&lt;/th&gt;
&lt;th&gt;staging area&lt;/th&gt;
&lt;th&gt;working directory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--soft&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--mixed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--hard&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;git checkout &amp;lt;commit-ish&amp;gt;&lt;/code&gt; dose not move tips around.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git revert&lt;/code&gt; undo commits by adding a new commit. it is a safe (reversible) way
to undo commits, while &lt;code&gt;git reset&lt;/code&gt; is dangerous (irreversible) way to undo
commits.&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;File level operations&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git [reset|checkout] &amp;lt;commit-ish&amp;gt; &amp;lt;pathspec&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;history&lt;/th&gt;
&lt;th&gt;staging area&lt;/th&gt;
&lt;th&gt;working directory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;toc_10&#34;&gt;Summary&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;commit level&lt;/th&gt;
&lt;th&gt;file level&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;discard commits in private branches or throw away uncommited changes&lt;/td&gt;
&lt;td&gt;unstage a file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;swtich between branches or inspect old snapshots&lt;/td&gt;
&lt;td&gt;discard changes in the working directory&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;revert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;undo commits in public branches&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;N/A&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>VIM CHAMELEON STARTUP MENU</title>
      <link>http://localhost:1313/memo/vim_chameleon_startup_menu/</link>
      <pubDate>Mon, 29 Sep 2014 15:57:37 CST</pubDate>
      
      <guid>http://localhost:1313/memo/vim_chameleon_startup_menu/</guid>
      <description>

&lt;p&gt;Records here the steps of making a small and neat vim-chameleon startup screen.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;On Windows:&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;create a shortcut from gVim.exe.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;right click on the shorcut to open it&amp;rsquo;s property dialog.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;append the following lines (&lt;em&gt;concatenated into one line&lt;/em&gt;) to the &lt;strong&gt;target&lt;/strong&gt; field.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--cmd &amp;quot;let g:mdx_chameleon_cur_mode = &#39;startup&#39;&amp;quot;
--cmd &amp;quot;set lines=9 columns=32&amp;quot;
--cmd &amp;quot;winpos 475 320&amp;quot;
-c &amp;quot;let &amp;amp;titlestring=&#39;Happy Vimming!&#39;&amp;quot;
-c &amp;quot;ChamStartup&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;optionally, put this shortcut under paths listed in system&amp;rsquo;s $PATH environment variable.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;On Mac OSX:&lt;/h1&gt;

&lt;p&gt;the &lt;code&gt;MacVim.app&lt;/code&gt; does not accepts arguemnts above, we should use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/Applications/MacVim.app/Contents/MacOS/Vim -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/Applications/MacVim.app/Contents/MacOS/Vim -g            \
        --cmd &amp;quot;let g:mdx_chameleon_cur_mode = &#39;startup&#39;&amp;quot;  \
        --cmd &amp;quot;set lines=9 columns=22&amp;quot;                    \
        --cmd &amp;quot;winpos 880 370&amp;quot;                            \
        -c &amp;quot;let &amp;amp;titlestring=&#39;Happy Vimming!&#39;&amp;quot;            \
        -c &amp;quot;let &amp;amp;guifont = &#39;Monaco for Powerline:h16&#39;&amp;quot;    \
        -c &amp;quot;ChamStartup&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;On Linux:&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GIT FLOW</title>
      <link>http://localhost:1313/note/git_flow/</link>
      <pubDate>Sun, 28 Sep 2014 16:38:26 CST</pubDate>
      
      <guid>http://localhost:1313/note/git_flow/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;1. Main Branches&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;main&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;keeps the official release history (usually with version nubmer tags
attached).&lt;/p&gt;

&lt;p&gt;i.e. every commits in master is a new release. all branches merged back
into master must have a new incremental version number.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the &lt;code&gt;develop&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;serves as an integration branch for features.&lt;/p&gt;

&lt;p&gt;nitghly build built from it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;2. Supporting Branches&lt;/h1&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;2.1 feature (or topic) branches&lt;/h2&gt;

&lt;p&gt;branch off from: &lt;code&gt;develop&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;merge into: &lt;code&gt;develop&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;naming convention: any name except &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;relase[/-]*&lt;/code&gt;,
&lt;code&gt;hotfix[/-]*&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Branch A New Feature Branch Off From Develop Branch
git checkout -b some-feature develop
# Add Feature Commits To Branch Some-feature ...
# Merge Feature Branch Back Into Develop Branch.
git checkout develop
git merge --no-ff some-feature
git push origin develop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;2.2 release branches&lt;/h2&gt;

&lt;p&gt;branch off from: &lt;code&gt;develop&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;merge into: &lt;code&gt;develop&lt;/code&gt; &amp;amp; &lt;code&gt;master&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;naming convention: &lt;code&gt;release/*&lt;/code&gt; or &lt;code&gt;release-*&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Branch A New Release Branch Off From Develop Branch
git checkout -b release-&amp;lt;version number&amp;gt; develop
# Bummp Up Version In Related Fiels.
git commit -m &#39;Bumped version number to &amp;lt;version number&amp;gt;&#39;
# Roll Out Release, Minor Bug Fixes
# Merge The Release Into Master, And Give It A New Tag.
git checkout master
git merge --no-ff release-&amp;lt;version number&amp;gt;
git tag -a &amp;lt;version number&amp;gt;
# Merge The Release Back Into Develop
git checkout develop
git merge --no-ff release-&amp;lt;version number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;2.3 hotfix (or maintenance) branches&lt;/h2&gt;

&lt;p&gt;branch off from: &lt;code&gt;master&lt;/code&gt; branch
merge into: &lt;code&gt;develop&lt;/code&gt; &amp;amp; &lt;code&gt;master&lt;/code&gt; branch if no active release branch existed
currrently.
naming convention: &lt;code&gt;hotfix/*&lt;/code&gt; or &lt;code&gt;hotfix-*&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Branch A New Hotfix Branch Off From Master Branch
git checkout -b hotfix-&amp;lt;version number&amp;gt; master
# Bummp Up Version In Related Fiels, Becuase It Will Finnaly Be Merged Back
# Into Master Branch.
git commit -m &#39;Bumped version number to &amp;lt;version number&amp;gt;&#39;
# Roll Out Hotfix, Minor Bug Fixes
# Merge The Hotfix Into Master, And Give It A New Tag.
git checkout master
git merge --no-ff hotfix-&amp;lt;version number&amp;gt;
git tag -a &amp;lt;version number&amp;gt;
# Merge The Hotfix Back Into Develop
git checkout develop
git merge --no-ff hotfix-&amp;lt;version number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GO&#39;S TEMPLATE LIBRARY</title>
      <link>http://localhost:1313/note/go_stdlib_template/</link>
      <pubDate>Fri, 26 Sep 2014 14:52:32 CST</pubDate>
      
      <guid>http://localhost:1313/note/go_stdlib_template/</guid>
      <description>

&lt;p&gt;I come across this library when I started to use &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;,
which says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is an extremely &lt;strong&gt;lightweight&lt;/strong&gt; engine that provides a very small amount of
logic. In our experience it is &lt;strong&gt;just the right amount of logic&lt;/strong&gt; to be able to
create a good static website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;3 Steps Using The Template Object&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;New&lt;/code&gt; an template object.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Parse&lt;/code&gt; template text.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Execute&lt;/code&gt; (apply) the template to data structure.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;6 Action Families&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;comment&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{/* comment here, line spanning allowed */}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;pipeline&lt;/strong&gt; like variable expansion (substitution)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{pipeline}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;if&lt;/strong&gt; family for branching logic&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{if _pipline_}} T1 {{end}}
{{if _pipline_}} T1 {{else}} T0 {{end}}
{{if _pipline_}} T1 {{else if _pipeline_ }} T0 {{end}}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;range&lt;/strong&gt; family for iteration (loop)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{range pipepine}} T1 {{end}}
{{range pipepine}} T1 {{else}} T0 {{end}}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;with&lt;/strong&gt; family for cursor (dot) moving&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{with pipeline}} T1 {{end}}
{{with pipeline}} T1 {{else}} T0 {{end}}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;template&lt;/strong&gt; family for tempates invocation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// with the dot &#39;.&#39; set to nil.
{{tempalte &amp;quot;name&amp;quot;}}
// with the dot &#39;.&#39; set to value of &#39;pipeline&#39;.
{{tempalte &amp;quot;name&amp;quot; pipeline}}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Argument Types&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;untyped &lt;strong&gt;constants&lt;/strong&gt; in go syntax&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;nil&lt;/strong&gt; &amp;ndash; the special constant&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;variable&lt;/strong&gt; name&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$variable_name&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;.&lt;/code&gt; &amp;ndash; the so called &amp;lsquo;context&amp;rsquo; constant&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;dot chain consist of: &lt;strong&gt;field&lt;/strong&gt; name,  &lt;strong&gt;key&lt;/strong&gt; name,  niladic &lt;strong&gt;method&lt;/strong&gt; name&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;(.Field.Key.Method args...).Field.Key ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;niladic &lt;strong&gt;function&lt;/strong&gt; name&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;parenthesized &lt;strong&gt;group&lt;/strong&gt; of above&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;print (func arg...) (.method arg...)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>