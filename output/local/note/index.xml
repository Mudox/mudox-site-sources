<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Notes on Mudox </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/note/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Wed, 29 Apr 2015 23:43:56 CST</updated>
    
    <item>
      <title>iOS NOTES - Media Frameworks</title>
      <link>http://localhost:1313/note/ios_notes_media_frameworks/</link>
      <pubDate>Wed, 29 Apr 2015 23:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/ios_notes_media_frameworks/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;iOS Media Frameworks Stack&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;../../../note/media_stack.svg&#34; alt=&#34;iOS media frameworks Stack&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The Trunk Relation Graph&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;../../../note/media_trunk_graph.svg&#34; alt=&#34;iOS media framework trunk relation graph&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOS NOTES - AMAP API DEPICTED</title>
      <link>http://localhost:1313/note/ios_notes_amap/</link>
      <pubDate>Tue, 28 Apr 2015 17:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/ios_notes_amap/</guid>
      <description>

&lt;p&gt;AMap (高德地图) APIs depicted in several graphs I draw.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;AMap Searching API&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;../../../note/amap_searching_graph.svg&#34; alt=&#34;AMap Searching API Graph&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOS NOTES - LOCATION BASED SERVIES</title>
      <link>http://localhost:1313/note/ios_notes_lbs/</link>
      <pubDate>Fri, 17 Apr 2015 14:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/ios_notes_lbs/</guid>
      <description>

&lt;p&gt;Quick steps to use iOS&amp;rsquo;s LBS technology.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Core Location&lt;/h1&gt;

&lt;p&gt;iOS devices integrates various hardware components, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GPS (Global Positioning System) for positioning&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hardware compass for heading monitoring.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WiFi for positioning.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cellular network for cell-tower triangulation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Blue tooth for iBeacon ranging.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;some data sensors for improve positioning accuracy under some circumstances.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to provides users with following LBS abilities as much as possible:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Location Updates&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Standard location updates&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Significant location updates&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Heading monitoring&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Region monitoring&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iBeacon ranging&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Visit events&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;CLLocationManager&lt;/code&gt; acts just like an &lt;code&gt;NSNotificationCenter&lt;/code&gt; (but it is not
a singleton) between the LBS hardwares and your App, you use it to request the
authorization for LBS functionalities you are planning to use afterwords, and
adjusts the relevant parameters of them before starting their notification
updating loops.&lt;/p&gt;

&lt;p&gt;After you call one of its&amp;rsquo; &lt;code&gt;start***&lt;/code&gt; or &lt;code&gt;request***&lt;/code&gt; methods to emit requests
for one of the 5 LBS abilities mentioned above, the &lt;code&gt;CLLocationManager&lt;/code&gt;
activate relevant hardware components, when the data is available it notifies
you asynchronously by calling one of the its&amp;rsquo; delegate&amp;rsquo;s methods.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../note/core_location_map.svg&#34; alt=&#34;Core Location Map&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Work flow of using LBS abilities.&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Project setup&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enable &lt;em&gt;Background Location Updates Background Mode&lt;/em&gt; capability.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add &lt;em&gt;NSLocationAlwaysUsageDescriptions&lt;/em&gt; or
&lt;em&gt;NSLocationWhenInUseUsageDescription&lt;/em&gt; key to info.plist.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configuring &lt;code&gt;CLLocationManager&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Creating a &lt;code&gt;CllocationManager&lt;/code&gt; instance and hold a strong reference to it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Specify location manager&amp;rsquo;s delegate, usually be a view controller.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check &amp;amp; request authorization status.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configures the relevant properties for the LBS functionality you are about
to use.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Before starting each LBS updating functions, there are also corresponding
APIs you can invoke to check the services availability.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Call &lt;code&gt;start**&lt;/code&gt; methods to start the various LBS notification loops.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// declare as some long-standing reference outside of function body.
let locationManager = CLLocationManager()
--------------------
// within functions ( be it in viewDidLoad() )
// designate delegate
locationManager.delegate = self
// request for authorization
locationManager.requestAlwaysAuthorization()
// configure updating related settings
locationManager.activityType = .AutomotiveNavigation
locationManager.desiredAccuracy = kCLLocationAccuracyBestForNavigation
locationManager.distanceFilter = 10
// finally check device &amp;amp; service availability before starting notification loop.
if CLLocationManager.locationServicesEnabled() {
  locationManager.startUpdatingLocation()
} else {
  let alert = UIAlertController(
    title: &amp;quot;Service Not Available&amp;quot;,
    message: &amp;quot;The location is not available or has been shut down.&amp;quot;,
    preferredStyle: .Alert)
  presentViewController(alert, animated: true, completion: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Implement &lt;code&gt;CLLocationManagerDelegate&lt;/code&gt; methods in you designated delegate
object to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;handle received location data updates.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;handle LBS failures.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;handle authorization status changes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;MapKit&lt;/h1&gt;

&lt;p&gt;In general, MapKit:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;shows map in one of three map types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Standard&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Satellite&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hybrid&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;along with many built-in elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;compass&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;POIs (points of interest)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;and provides developer with two kinds of customizable presentation
facilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;annotations&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;overlays&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As of managing annotations, MapKit adopts the same design pattern as that is
heavily used by &lt;code&gt;UITableView&lt;/code&gt; &amp;ndash; decoupling data model from presentation tools
through &lt;strong&gt;reuse pool&lt;/strong&gt;. Hence, there comes separate class hierarchies for
storing annotation (overlay) data, and presenting them respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;data object&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;all objects that conforms to &lt;code&gt;MKAnnotation&lt;/code&gt; protocol, are responsible for
storing data for annotations, such as location, textual info, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;all objects that conforms to &lt;code&gt;MKOverlay&lt;/code&gt; protocol, are responsible for
storing data for overlays, such as location, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;presentation tools&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;instances that inherit from &lt;code&gt;MKAnnotationView&lt;/code&gt; can be &lt;strong&gt;reused&lt;/strong&gt; to display a data objects.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;instances that inherit from &lt;code&gt;MKOverlayRenderer&lt;/code&gt; can be used to display a overlay objects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../note/map_kit_map.svg&#34; alt=&#34;MapKit map&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Customize annotation view&lt;/h2&gt;

&lt;p&gt;A annotation view usually consist of 2 parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The view view.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Set its&amp;rsquo; &lt;code&gt;image&lt;/code&gt; property to change its&amp;rsquo; appearance.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The callout view, which is popped up when the pin view is selected.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The built-in callout view is not exposed for customization, so we should disable the &lt;code&gt;canShowCallout&lt;/code&gt; property&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SWIFT NOTES - CLOSURE</title>
      <link>http://localhost:1313/note/swift_notes_closure/</link>
      <pubDate>Tue, 14 Apr 2015 08:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/swift_notes_closure/</guid>
      <description>

&lt;p&gt;Thanks to the host of technologies provided by the Swift
compiler, the closure comes with a bunch of syntactic
sugars that could sweet you to diabetes.&lt;/p&gt;

&lt;p&gt;The full syntax of a closure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;{
  (parameters) -&amp;gt; retrunType in
  ... statements ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example that uses the array&amp;rsquo;s method &lt;code&gt;sorted&lt;/code&gt; to sort an array of
word.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var words = [ &amp;quot;Dolor&amp;quot;, &amp;quot;eum&amp;quot;, &amp;quot;id&amp;quot;, &amp;quot;suscipit&amp;quot;, &amp;quot;necessitatibus&amp;quot;, &amp;quot;quod&amp;quot;, &amp;quot;hic&amp;quot;, &amp;quot;dignissimos&amp;quot; ]

let sortedWords = words.sorted({
  (lhs: String, rhs: String) -&amp;gt; Bool in
  return lhs &amp;lt; rhs
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the sugars introduced in, we will cut the lines above into an incredibly one
line of code.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Sugar #0 &amp;ndash; trailing closure&lt;/h1&gt;

&lt;p&gt;Often, closure parameter is placed last in parameter list. Swift thus provides
&lt;strong&gt;trailing closure&lt;/strong&gt;, which means your can write the inline closure just
outside the parameter list, following the closing &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Furthermore, if the closure is the only parameter, then the parenthesis can be
omitted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// trailing closure
let sortedWords = words.sorted/*()*/ {
  (lhs: String, rhs: String) -&amp;gt; Bool in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Sugar #1 &amp;ndash; return type inference&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;return type&lt;/strong&gt; can be inferred by swift compiler.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit return type
let sortedWords = words.sorted {
  (lhs: String, rhs: String) /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Sugar #2 &amp;ndash; parameter type inference&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;parameter types&lt;/strong&gt; can be inferred by swift compiler as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit parameter types
let sortedWords = words.sorted {
  (lhs/*: String*/, rhs/*: String*/) /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Sugar #3 &amp;ndash; parenthesis-less&lt;/h1&gt;

&lt;p&gt;Since no type annotation is needed, the &lt;strong&gt;parenthesis&lt;/strong&gt; can be omitted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit parenthesis
let sortedWords = words.sorted {
  /*(*/lhs/*: String*/, rhs/*: String)*/ /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Sugar #4 &amp;ndash; return statement inference&lt;/h1&gt;

&lt;p&gt;If the closure has one statement, then the &lt;strong&gt;return&lt;/strong&gt; statement can also be
inferred.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit &#39;return&#39;
let sortedWords = words.sorted {
  /*(*/lhs/*: String*/, rhs/*: String)*/ /*-&amp;gt; Bool*/ in
  /*return*/ lhs &amp;lt; rhs
}

//then we got:
let sortedWords = words.sorted { lhs, rhs in lhs &amp;lt; rhs }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;Sugar #5 &amp;ndash; shorthand parameter name&lt;/h1&gt;

&lt;p&gt;Swift provides &lt;strong&gt;shorthand parameter names&lt;/strong&gt;: $0 for the 1st parameter, $1 for
the 2nd parameter, and so on. And as an side effect, the whole &lt;code&gt;(parameters) -&amp;gt;
returType in&lt;/code&gt; statement can be completely omitted&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// use shorthand parameters, omit the whole &#39;in&#39; statement
let sortedWords = words.sorted {
  /*(lhs: String, rhs: String) -&amp;gt; Bool in*/
  /*return*/ $0 &amp;lt; $1
}

// then we got:
let sortedWords = words.sorted { $0 &amp;lt; $1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Sugar #6 &amp;ndash; operator as a closure&lt;/h1&gt;

&lt;p&gt;In swift, &lt;strong&gt;operator&lt;/strong&gt; is a function, which in turn is a &lt;strong&gt;special closure&lt;/strong&gt;, so&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// comes operator!
let sortedWords = words.sorted(&amp;lt;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UNICODE CONCEPTS DEFINED</title>
      <link>http://localhost:1313/note/unicode_concepts_defined/</link>
      <pubDate>Mon, 13 Apr 2015 18:10:59 CST</pubDate>
      
      <guid>http://localhost:1313/note/unicode_concepts_defined/</guid>
      <description>&lt;p&gt;Collect several Unicode concepts encountered when I learn Swift&amp;rsquo;s String type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;UCS&lt;/p&gt;

&lt;p&gt;Universal Coded Character Set (通用字符集)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Universal Coded Character Set (UCS), defined by the International
Standard ISO/IEC 10646, Information technology — Universal Coded
Character Set (UCS) (plus amendments to that standard), is a standard set
of characters upon which many character encodings are based. The UCS
contains nearly one hundred thousand abstract characters, each identified
by an unambiguous name and an integer number called its code point.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unicode&lt;/p&gt;

&lt;p&gt;统一码，万国码, 单一码&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unicode is a computing industry standard for the consistent encoding,
representation, and handling of text expressed in most of the world&amp;rsquo;s
writing systems. Developed in conjunction with the Universal Character
Set standard and published as The Unicode Standard, the latest version of
Unicode contains a repertoire of more than 110,000 characters covering
100 scripts and multiple symbol sets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As for its&amp;rsquo; code space layout:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unicode comprises 1,114,112 code points in the range 0x0 to 0x10FFFF.
The Unicode code space is divided into 17 planes (the basic multilingual
plane, and 16 supplementary planes), each with 65,536 (= 216) code
points. Thus the total size of the Unicode code space is 17 × 65,536 =
1,114,112.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UTF&lt;/p&gt;

&lt;p&gt;UCS/Unicode Transformation Format (通用字符集转换格式, Unicode 转换格式)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UTF-8&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;UTF-8 (U from Universal Character Set + Transformation Format—8-bit[1])
is a character encoding capable of encoding all possible characters
(called code points) in Unicode. The encoding is variable-length and uses
8-bit code units. It was designed for backward compatibility with ASCII
and to avoid the complications of endianness and byte order marks in
UTF-16 and UTF-32.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;code point (code position)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In character encoding terminology, a code point or code position is any
of the numerical values that make up the code space.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unicode scalar&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Behind the scenes, Swift’s native String type is built from Unicode
scalar values. A Unicode scalar is a unique 21-bit number for a character
or modifier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The distinction between Unicode scalar &amp;amp; Unicode code point could be
clarified as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Unicode scalar is any Unicode code point in the range U+0000 to U+D7FF
inclusive or U+E000 to U+10FFFF inclusive. Unicode scalars do not include
the Unicode surrogate pair code points, which are the code points in the
range U+D800 to U+DFFF inclusive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is a Swift language specific notion, or more actually, a Swift defined
internal type for storing string charactor&amp;rsquo;s Unicode points that Swift
choose to support. Behind the scene, it&amp;rsquo;s a 21bit long numeric type, but
not all number in the range can reponds to a valid Unicode point.&lt;/p&gt;

&lt;p&gt;So mathematically, the Unicode points universal set is a discrete subset of
integer set [0, 0x10FFFF]. The Swift Unicode scalar universal set is, in
turn, a discrete subset of Unicode code point universal set (with all
&lt;em&gt;surroagte pair&lt;/em&gt; code points stripped).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;code unit&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A code unit is a bit sequence used to encode each character of a
repertoire. Encodings associate their meaning with either a single code
unit value or a sequence of code units as one value.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;extended grapheme cluster&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every instance of Swift’s Character type represents a single extended
grapheme cluster. An extended grapheme cluster is a sequence of one or
more Unicode scalars that (when combined) produce a single human-readable
character.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SWIFT NOTES - FUNCTIONS</title>
      <link>http://localhost:1313/note/swift_notes_functions/</link>
      <pubDate>Mon, 13 Apr 2015 16:26:59 CST</pubDate>
      
      <guid>http://localhost:1313/note/swift_notes_functions/</guid>
      <description>

&lt;p&gt;Excerpts from the &amp;ldquo;Functions&amp;rdquo; section of the official docuemnt &amp;ldquo;The Swift
Programming Language&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Function Parameters&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Parameter names&lt;/h2&gt;

&lt;p&gt;A parameter name can have a &lt;strong&gt;internal name&lt;/strong&gt; and an &lt;strong&gt;external name&lt;/strong&gt; declared
in the form of: &lt;code&gt;external_name internal_name: type&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func join(String string: leftString, toString rightString) -&amp;gt; String {
  return leftString + rightString
}

println(join(String: &amp;quot;Hello&amp;quot;, toString: &amp;quot; World!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;#&lt;/code&gt; to use the same name for both names: &lt;code&gt;#name: type&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func join(#aString: leftString, #toString) -&amp;gt; String {
  return aString + toString
}

println(join(aString: &amp;quot;Hello&amp;quot;, toString: &amp;quot; World!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;_&lt;/code&gt; to suppress external name: &lt;code&gt;_ internal_name: type&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func join(_ aString: leftString, _ toString) -&amp;gt; String {
  return aString + toString
}

println(join(&amp;quot;Hello&amp;quot;, &amp;quot; World!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Parameters with default value&lt;/h2&gt;

&lt;p&gt;Default parameter values of the &lt;code&gt;[external_name /_/#]internal_name: type =
default_value&lt;/code&gt; should be placed at end of the parameter list.&lt;/p&gt;

&lt;p&gt;The compiler will synthesize a external name by reusing the internal name for
parameters with default value, if their external name is not explicitly
specified in the parameter list. (You can use &lt;code&gt;_&lt;/code&gt; to suppress this behavior,
which is not recommended.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func Foo(arg1: String, arg2: Int = 30, _ arg3: Bool, #arg4: Double) {
  ...
}

Foo(&amp;quot;text&amp;quot;, arg2: 1, true, arg4: 4.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Variadic parameters&lt;/h2&gt;

&lt;p&gt;Declare variadic parameter in form &lt;code&gt;name: type...&lt;/code&gt;, which, in the function
body, is of type &lt;code&gt;[type]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Only one variadic parameter is allowed in a parameter list, and it should be
placed after all other normal parameters or parameters with default value.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Variable parameters&lt;/h2&gt;

&lt;p&gt;Prefix parameter names with keyword &lt;code&gt;var&lt;/code&gt; to make them modifiable inside the
function body.&lt;/p&gt;

&lt;p&gt;It is just another small syntactic sugar brought by Swift, the change made in
the function body will not propagate outside the function body.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;In-Out parameters&lt;/h2&gt;

&lt;p&gt;Prefix parameters names with keyword &lt;code&gt;inout&lt;/code&gt; (which implies &lt;code&gt;var&lt;/code&gt;) to make the
change to the parameter inside function body propagate outside.&lt;/p&gt;

&lt;p&gt;When specifying argument for &lt;code&gt;inout&lt;/code&gt; parameters, prepend &lt;code&gt;&amp;amp;&lt;/code&gt; to the argument
name to indicate that it could be modified during the function call.&lt;/p&gt;

&lt;p&gt;In-out parameters cannot have default values, and variadic parameters cannot be
marked as &lt;code&gt;inout&lt;/code&gt;. If you mark a parameter as &lt;code&gt;inout&lt;/code&gt;, it cannot also be marked
as var or let.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func swapTwoInts(inout a: Int, inout b: Int) {
    let temporaryA = a
    a = b
    b = temporaryA
}

var a = 2
var b = 10
swapTwoInts(&amp;amp;a, &amp;amp;b)
println(&amp;quot;after swapping, a = \(a), b = \(b)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Function Return Values&lt;/h1&gt;

&lt;p&gt;Functions without a defined return type return a special value of type
&lt;strong&gt;Void&lt;/strong&gt;.  This is simply an empty tuple, in effect a tuple with zero elements,
which can be written as &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use a tuple type (or a optional tuple) as the return type for a
function to return multiple values as part of one compound return value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// wrap multiple return values in an optional tuple.
func minMax(array: [Int]) -&amp;gt; (min: Int, max: Int)? { ... }

if let minMax = minMax([1,2,3]) {
  // use name to fetch tuple element.
  println(&amp;quot;min: \(minMax.min)\tmax: \(minMax.max)&amp;quot;)

  // use index to fetch tuple elements.
  println(&amp;quot;min: \(minMax.0)\tmax: \(minMax.1)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Function Types&lt;/h1&gt;

&lt;p&gt;In Swift, function is first class object, so feel free to use them as other
normal objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;passing them as argument into functions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;return them from functions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;declare theme as type alias for convenience.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;even nest their in another function.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias cmp = (Int, Int) -&amp;gt; Bool

func whichCmp(functionPassedIn: ()-&amp;gt; Bool) -&amp;gt; cmp {
  func Foo(lhs: Int, rhs: Int) -&amp;gt; Bool {
    return false
  }

  func Hoo(lhs: Int, rhs: Int) -&amp;gt; Bool {
    return true
  }

  return functionPassedIn() ? Foo : Hoo
}

func aFunc() -&amp;gt; Bool {
  return false
}

whichCmp(aFunc)(1334, 234)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>iOS NOTES - CASTING</title>
      <link>http://localhost:1313/note/ios_notes_casting/</link>
      <pubDate>Sun, 12 Apr 2015 14:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/ios_notes_casting/</guid>
      <description>

&lt;p&gt;Collect all my gain from study &amp;amp; using Swift&amp;rsquo;s casting mechanism here.&lt;/p&gt;

&lt;p&gt;First defining a sample class hierarchy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class SuperClass {
  func say() {
    println(&amp;quot;super class&amp;quot;)
  }
}

class Subclass: SuperClass {
  override func say() {
    println(&amp;quot;subclass&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;3 Kinds of Castings&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Natural Casting&lt;/p&gt;

&lt;p&gt;Used in &lt;strong&gt;up-casting&lt;/strong&gt; (i.e. casting from a sub-class instance to a super
class instance)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var a = SubClass()
var b = a as SuperClass
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unconditional Casting (or forced casting)&lt;/p&gt;

&lt;p&gt;Used in &lt;strong&gt;down-casting&lt;/strong&gt; (i.e. the contrary of the above).&lt;/p&gt;

&lt;p&gt;When the casting failed, it would incur a panic.&lt;/p&gt;

&lt;p&gt;Use it when you are confident about the down-casting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conditional Casting&lt;/p&gt;

&lt;p&gt;Used in &lt;strong&gt;down-casting&lt;/strong&gt;, but it always returns optionals whether succeed
or fail, that means when not
applicalbe, instead of emitting a panic, it returns nil.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Natural casting is used in &lt;em&gt;always-succeed&lt;/em&gt; castings.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conditional &amp;amp; Unconditional castings are used in &lt;em&gt;might-fail&lt;/em&gt; castings.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;2 Operator for Casting&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;is&lt;/code&gt; operator&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;as&lt;/code&gt; operators - &lt;code&gt;as&lt;/code&gt;, &lt;code&gt;as?&lt;/code&gt;, &lt;code&gt;as!&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Special casting scenarios in practice&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Protocol Casting&lt;/h2&gt;

&lt;p&gt;In Swift the relationship between a protocol and the classes adopting that
protocol is like the relationship between a super class and its&amp;rsquo; sub-classes.
Hence casting a protocol object, such as the &lt;code&gt;AnyObject&lt;/code&gt; to its&amp;rsquo; underlying
class is regarded as a down-casting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit // import AppKit

let a: AnyObject = &amp;quot;String&amp;quot;
let b: a as! String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are 3 special types: &lt;code&gt;Any&lt;/code&gt;, &lt;code&gt;AnyObject&lt;/code&gt;, &lt;code&gt;AnyClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By tracing the source code, you would find the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// The protocol to which all classes implicitly conform.
///
/// When used as a concrete type, all known `@objc` methods and
/// properties are available, as implicitly-unwrapped-optional methods
/// and properties respectively, on each instance of `AnyObject`.
@objc procotol AnyObject {}

/// The protocol to which all class types implicitly conform.
///
/// When used as a concrete type, all known `@objc` `class` methods and
/// properties are available, as implicitly-unwrapped-optional methods
/// and properties respectively, on each instance of `AnyClass`.
typealias AnyClass = AnyObject.Type

/// The protocol to which all types implicitly conform
typealias Any = protocol&amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There exists a prerequisite for the rules all above: the &lt;code&gt;Foundation&lt;/code&gt; framework
must be imported. (Usually, you import &lt;code&gt;UIKit&lt;/code&gt; or &lt;code&gt;AppKit&lt;/code&gt;, which implicitly
import &lt;code&gt;Foundation&lt;/code&gt; framework). Only then can swift compiler be able to
recognize the &lt;code&gt;@objc&lt;/code&gt; keyword, and have Objective-C type bridging ability.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Optional AnyObject Collection Casting&lt;/h2&gt;

&lt;p&gt;For a optional of Collection of AnyObject that reference objects of the same
class (or super class) T, can be [un]conditionally casted to [T] (without
being wrapped in optional anymore)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit // import Appkit

// optional array of String.
let a: [AnyObject]? = [&amp;quot;Newyork&amp;quot;, &amp;quot;London&amp;quot;, &amp;quot;Peking&amp;quot;]
let b = a as! [String] // succeed.

// optional array of mixed object that have no common super class.
let a: [AnyObject]? = [&amp;quot;Newyork&amp;quot;, 1983, 3.14, false]
let b = a as! [String] // fail: not all element are of String.

// optinal array of mixed objects that derived from the same super class.
let a: [AnyObject]? = [Subclass(), SuperClass(), SuperClass(), Subclass()]
let b = a as! [Subclass] // succeed: not all element are of String.

// implicitly unwrapped optional dictionary with String typped keys and Int typed values.
let a: [NSObject: AnyObject]! = [&amp;quot;id1&amp;quot;: 32, &amp;quot;id2&amp;quot;: 66]
if let b = a as? [String: Int] {
  println(b)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code list above, the String is a structure type in Swift (no a class
type), but it can also be referenced by a &lt;code&gt;AnyObject&lt;/code&gt; instance. The rules come
from the following excerpt from &amp;ldquo;Using Swift with Cocoa and Objective-C&amp;rdquo;
official document:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An object is AnyObject compatible if it is an instance of an Objective-C or
Swift class, or if the object can be bridged to one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There exist several swift - Objective-C type bridging depicted as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../note/swift_objc_bridging.svg&#34; alt=&#34;Siwft - Objective-C Bridging&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Hence, back to the code listing above, the Swift type &lt;code&gt;String&lt;/code&gt; can be bridged
to NSString &lt;code&gt;Foundation&lt;/code&gt; class, then it is &lt;code&gt;AnyObject&lt;/code&gt; compatible.&lt;/p&gt;

&lt;p&gt;In practice, there exists quit a few occasions that you need to cast optional
collections to type specific Swift collections to utilize their underlying
methods or properties.&lt;/p&gt;

&lt;p&gt;For example, when you invoke the Objective-C APIs that return &lt;code&gt;NSArray&lt;/code&gt;,
&lt;code&gt;NSDictionary&lt;/code&gt;, &lt;code&gt;NSSet&lt;/code&gt;, you would get &lt;code&gt;[AnyOject]!&lt;/code&gt; &lt;code&gt;[NSObject: AnyOject]!&lt;/code&gt;,
&lt;code&gt;[NSObject]!&lt;/code&gt; respectively, you could cast [un]conditionally to a more concrete
Swift collection type before you access the individual elements within they.&lt;/p&gt;

&lt;p&gt;When you use &lt;code&gt;as!&lt;/code&gt; (the unconditional casting), you got an unwrapped collection
in one line of code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let asset: AVURLAsset = ...
for meta in asset.commonMetadata as! [AVMetadataItem] {
  switch meta.commonKey {
  case AVMetadataCommonKeyTitle:
    item.title = meta.stringValue
  case AVMetadataCommonKeyArtist:
    item.artist = meta.stringValue
  case AVMetadataCommonKeyAlbumName:
    item.albumName = meta.stringValue
  case AVMetadataCommonKeyArtwork:
    switch meta.value {
    case let data as NSData:
      item.artwork = UIImage(data: data)
    case let dict as [NSObject: AnyObject]:
      item.artwork = UIImage(data: dict[&amp;quot;data&amp;quot;] as! NSData)
    default:
      assert(false, &amp;quot;Invalid metadata value type&amp;quot;)
    }
  default:
    break
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>iOS NOTES - KEYBOARD</title>
      <link>http://localhost:1313/note/ios_notes_keyboard/</link>
      <pubDate>Wed, 08 Apr 2015 16:19:59 CST</pubDate>
      
      <guid>http://localhost:1313/note/ios_notes_keyboard/</guid>
      <description>

&lt;p&gt;Handle iOS keyboard poppu &amp;amp; resignment gracefully.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;UIWindow provide 6 keyboard related notifications&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIKeyboard[Will/Did]ShowNotification&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIKeyboard[Will/Did]HideNotification&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIKeyboard[Will/Did]ChangeFrameNotification&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After playing with these notifications above, I found:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When you want to move obscured contents or views to above the keyboard, put
the frame adjustment code in *&lt;strong&gt;Will&lt;/strong&gt;* notifications, because the handler
methods seems to be invoked within the same animation block that provides
the keyboard revealing animation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you are only interested in tracing keyboard&amp;rsquo;s frame (more specifically the
height) during keyboard&amp;rsquo;s presence, monitoring
&lt;code&gt;UIKeyboardWillShowNotification&lt;/code&gt; seems enough, no need to monitoring
&lt;code&gt;UIKboardWillChangeFrameNotification&lt;/code&gt; additionally.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The frame size stored in &lt;code&gt;UIKeyboardFrameBeginUserInfoKey&lt;/code&gt; and
&lt;code&gt;UIKeyboardFrameEndUserInfoKey&lt;/code&gt; keys will only differ after keyboard is
first shown and before it is hidden. When the keyboard is first shown or is
resigned, the &lt;code&gt;Begin&lt;/code&gt; or &lt;code&gt;End&lt;/code&gt; frame is equal.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Strategies for move contents above the keyboard:&lt;/h1&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;For contents embedded in &lt;code&gt;UISCrollView&lt;/code&gt;s&lt;/h2&gt;

&lt;p&gt;Way #1 &amp;ndash; Adjust the bottom edge inset value of the containing scroll view&amp;rsquo;s
contentsInset property and scroll active view into visible area using
&lt;code&gt;scrollRectToVisible: animated:&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Way #2 &amp;ndash; Adjust containing scroll view&amp;rsquo;s contentSize &amp;amp; contentOffset
properties.&lt;/p&gt;

&lt;p&gt;No matter which way above you choose, remember to adjust
&lt;code&gt;scrollIndicatorInsets&lt;/code&gt;&amp;rsquo;s bottom edge inset value to make the indicator fully
un-obscured from the keyboard.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;For contents outside any &lt;code&gt;UIScrollView&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Recalculate and set its&amp;rsquo; frame.origin.y value in
&lt;code&gt;UIKeyboardWillShowNotification&lt;/code&gt; handler method, and the movement will be
animated along with the revealing of keyboard perfectly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func handleKeyboardNotification(notify: NSNotification) {
  let value = notify.userInfo?[UIKeyboardFrameEndUserInfoKey] as NSValue
  let keyboardHeight = value.CGRectValue().height

  switch notify.name {

  case UIKeyboardWillShowNotification:
    theViewToMove.frame.origin.y = self.view.bounds.height - keyboardHeight - theViewToMoveMargin - theViewToMove.bounds.height
    theScrollViewToAdjust.contentInset.bottom = keyboardHeight
    itemsTable.scrollIndicatorInsets.bottom = keyboardHeight

  case UIKeyboardWillHideNotification:
    theViewToMove.frame.origin.y = self.view.bounds.height - theViewToMoveMargin - theViewToMove.bounds.height
    theScrollViewToAdjust.contentInset.bottom = 0.0
    itemsTable.scrollIndicatorInsets.bottom = 0.0 // the default value

  default:
    assert(false)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;References:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html#//apple_ref/doc/uid/TP40009542-CH5-SW7&#34;&gt;Moving Contents That is Located Under the Keyboard in Text Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIWindow_Class/&#34;&gt;UIWindow Class Reference&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SWIFT OJECT-ORIENTED FEATURE</title>
      <link>http://localhost:1313/note/swift_oo/</link>
      <pubDate>Wed, 29 Oct 2014 21:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/swift_oo/</guid>
      <description>

&lt;p&gt;Learning notes about object oriented features of the Swift programming
language.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Class Like Constructs In Swift&lt;/h1&gt;

&lt;p&gt;In Swift, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; all can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;have &lt;strong&gt;properties&lt;/strong&gt; to keep states.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;have &lt;strong&gt;methods&lt;/strong&gt; to perform actions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;define &lt;strong&gt;subscript&lt;/strong&gt; operators to let user access their properties through
subscript syntax.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;define &lt;strong&gt;initializers&lt;/strong&gt; to have a reasonable initial state.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;be &lt;strong&gt;extended&lt;/strong&gt; to have additional behaviors beyond their default implementations.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;conform to &lt;strong&gt;protocols&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Only &lt;code&gt;class&lt;/code&gt; can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;have &lt;strong&gt;inheritance&lt;/strong&gt; capability.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;have &lt;strong&gt;deinitializer&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;be &lt;strong&gt;referenced&lt;/strong&gt; by mutiple variable or constants. the &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt;
are both value types.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Properties&lt;/h1&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;stored properties&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;lazy properties&lt;/h3&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;computed properties&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;shorthand setter syntax&lt;/h3&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;shorthand read-only getter syntax&lt;/h3&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Initializers&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>JAVASCRIPT TYPE CONVERSIONS</title>
      <link>http://localhost:1313/note/javascript_type_conversions/</link>
      <pubDate>Tue, 28 Oct 2014 11:33:15 CST</pubDate>
      
      <guid>http://localhost:1313/note/javascript_type_conversions/</guid>
      <description>

&lt;p&gt;Here records what I learned about JavaScript&amp;rsquo;s type conversion.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Sepcial Value Or Types In JavaScript&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The &lt;code&gt;undefined&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;undefined&lt;/code&gt; is the only value of &lt;code&gt;undefined&lt;/code&gt;, represents unknown value of any
other types, including primitive types &amp;amp; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// play with &#39;undefined&#39;
typeof undefiend                  /* undfeined        */
undefined == undefined            /* true             */
undefined == null                 /* true             */
undefined !== null                /* true             */
Boolean(undefined)                /* false            */
Number(undefined)                 /* NaN              */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;The &lt;code&gt;null&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;null&lt;/code&gt;, by standards, should be the only value of &lt;code&gt;null&lt;/code&gt; type, but in certain
browser (e.g. firfox, chrome), it is of type &lt;code&gt;object&lt;/code&gt;. &lt;code&gt;null&lt;/code&gt; is used to
represent unknown value of an object.&lt;/p&gt;

&lt;p&gt;It is equal to itself and it is equal to &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// play with &#39;null&#39;
typeof null                       /* object           */
null == null                      /* true             */
null == undefined                 /* true             */
null !== undefined                /* true             */
Boolean(null)                     /* false            */
Number(null)                      /* 0                */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;The &lt;code&gt;NaN&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;NaN&lt;/code&gt; is a &lt;code&gt;Number&lt;/code&gt; that can not be represented as a number.&lt;/p&gt;

&lt;p&gt;It dose &lt;strong&gt;NOT&lt;/strong&gt; equal to itself, hence JavaScript provide a built-in function
&lt;code&gt;isNaN()&lt;/code&gt; to test if a value is a NaN.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascri&#34;&gt;// play with &#39;NaN&#39;
typeof NaN                        /* number           */
NaN == NaN                        /* false            */
NaN == undefined                  /* false            */
NaN == null                       /* false            */
Boolean(NaN)                      /* false            */
Number(NaN)                       /* NaN              */
isNaN(NaN)                        /* true             */
NaN == 0/0                        /* true             */
isNaN(0/0)                        /* true             */
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Implicit Type Conversions&lt;/h1&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;When other types need to be converted into a number&lt;/h2&gt;

&lt;p&gt;When different types are mixed in a relational operation (i.e &lt;code&gt;== != &amp;lt; &amp;lt;= &amp;gt;
&amp;gt;=&lt;/code&gt;) except the &lt;code&gt;===&lt;/code&gt; operator, or an arithmetic operation, except
the &lt;code&gt;+&lt;/code&gt; operator, they would be converted into numbers first.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;For Boolean:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;true would be converted to 1&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;false would be converted to 0&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;For String:&lt;/h3&gt;

&lt;p&gt;It is converted literally, i.e.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#39;2014&#39; &amp;lt; 2 /* 2014 &amp;lt; 2 yields false */
&#39;3.1415&#39; == 3.1415 /* 3.1415 == 3.1415 yields true */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is one exception: a &lt;code&gt;emtpy&lt;/code&gt; string would be converted to 0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var emptyText = &#39;&#39;;

/* &#39;emptyText&#39; here, converetd to 0, is compared to true which is converted to 1,
and then &#39;!&#39; negates the results to true */
if (!emptyText) {
  console.log(&#39;empty text is not true!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;When other types need to be converted into a string&lt;/h2&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;The special &lt;code&gt;+&lt;/code&gt; operator&lt;/h3&gt;

&lt;p&gt;In JavaScript, the &lt;code&gt;+&lt;/code&gt; is first a string concatenation operator, then a
arithmetic addition operator.&lt;/p&gt;

&lt;p&gt;When one of &lt;code&gt;+&lt;/code&gt;&amp;rsquo;s operands is a string, JavaScript will try to convert the
other operand into a string, and perform a concatenation operation.&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;For Boolean:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;true&lt;/code&gt; would be conveted bo &amp;ldquo;true&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;false&lt;/code&gt; would be conveted to &amp;ldquo;false&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;For &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; &amp;amp; &lt;code&gt;NaN&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;they all be converted literally.&lt;/p&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;When other types need to be converted into a boolean value&lt;/h2&gt;

&lt;p&gt;from 《Head First JavaScript Programming》:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the secret to learning what is truthy and what is falsey is to learn what’s
falsey, and then consider everything else truthy.
concentrate on  knowing what is falsey, and then everything else you can
consider truthy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;it is a golden rule that also applys in many other programming language
learning situations.&lt;/p&gt;

&lt;p&gt;As to what value should be considered as falsey, different language has
different policy. There are &lt;strong&gt;5&lt;/strong&gt; falsey value in JavaScript:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WEB PAGE LAYOUTS</title>
      <link>http://localhost:1313/note/web_page_layouts/</link>
      <pubDate>Sun, 26 Oct 2014 21:36:29 CST</pubDate>
      
      <guid>http://localhost:1313/note/web_page_layouts/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Liquid Layout&lt;/h1&gt;

&lt;p&gt;This is the browser&amp;rsquo;s default layout behavior, if you did not add any CSS to
style a page. The block elements, like liquid, just fill as much space as they
can in the pages.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Frozen Layout&lt;/h1&gt;

&lt;p&gt;By using the CSS attribute combination of &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt;, we can put a
&lt;strong&gt;containing&lt;/strong&gt; block (i.e. &lt;code&gt;&amp;lt;seciton&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;) to float on to
left-most or right-most side forming a &lt;strong&gt;column&lt;/strong&gt;, and let the  remaining
content to flow around the fixed-width floating column, forming the other
column.&lt;/p&gt;

&lt;p&gt;Use CSS attribute &lt;code&gt;clear: [left | right]&lt;/code&gt; to let a block to layout fully
underneath a floating elements.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Jello Layout&lt;/h1&gt;

&lt;p&gt;On the basis of frozen layout, we can use containing fixed-width block to wrap
all columns (floating or flowing), and by using &lt;code&gt;margin-left: auto;
margin-right: auto;&lt;/code&gt; CSS style, to center the contained columns in the page.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Absolute Position&lt;/h1&gt;

&lt;p&gt;By using the CSS attribute combination of &lt;code&gt;position: [absolute | fixed]&lt;/code&gt; and
&lt;code&gt;left | right | top | bottom: ...&lt;/code&gt;, we can take the column fully out of layout
flow, and fix their position relative to the page (&lt;code&gt;position: absolute&lt;/code&gt;), or to
the viewport (&lt;code&gt;position: fixed&lt;/code&gt;).&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Table Display&lt;/h1&gt;

&lt;p&gt;Use CSS attribute &lt;code&gt;display: [table | table-row | table-cell]&lt;/code&gt; to organize HTML
elements into an invisible table.&lt;/p&gt;

&lt;p&gt;Most of the time, &lt;code&gt;vertical-align: top&lt;/code&gt; will help you to get what you want to see.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SWIFT FEATURES</title>
      <link>http://localhost:1313/note/swift_features/</link>
      <pubDate>Tue, 14 Oct 2014 21:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/swift_features/</guid>
      <description>

&lt;p&gt;During the learning of the Swift programming language, many of it&amp;rsquo;s features
impressed me.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Powerful &lt;code&gt;switch&lt;/code&gt; Statement&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;no implicitly fall-through&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;match multiple conditions in one case statement.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;match against range.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;match against tuple.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;value binding.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;where&lt;/code&gt; clause can provide more conditions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;break&lt;/code&gt; &amp;amp; &lt;code&gt;continue&lt;/code&gt; can &lt;em&gt;jump&lt;/em&gt; further (to some label)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var aPoint = (x: 2, y: -1)
// labeled `swtich`
// NOTE: only loop statements and &#39;switch&#39; statement can labeled.
theSwitch: switch aPoint {
// against tuple
case (0, 0):
  println(&amp;quot;origin point&amp;quot;)

// against multiple conditions separated by comma
case (1, 1), (2, 2):
  println(&amp;quot;(1, 1) or (2, 2)&amp;quot;)

// &#39;_&#39; means &#39;any value is ok&#39;
case (_, 0):
  // the `break` here is just like the `pass` in python, acting as a
  // &#39;placeholder statement&#39;, nullifing this case branch.
  break

case (0, _):
  println(&amp;quot;on the Y-axis&amp;quot;)

// against range
case (-2...2, -2...2):
  println(&amp;quot;on or in the 2x2 box&amp;quot;)

// value binding
case (let x, -10):
  println(&amp;quot;on the horizontal line y = -10, with a x value: \(x)&amp;quot;)

// where clause
// NOTE: `let` can be replaced with `var` if you need to change the bound
// value afterwards.
case (0, var y) where y &amp;gt;= 0:
  y++    // mutable
  println(&amp;quot;on the 1st or 2nd quadrant&amp;quot;)

// value binding as a whole, which is an required exhaustive match
case let (x, y):
  theLoop: for i in 1..&amp;lt;100 {
    switch i {
      case let x where (x &amp;amp; 1) == 1: // a odd number
        break theSwitch     // jump further
      default:
        continue theLoop    // jump
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Closure &amp;ndash; Too Much Sugar!&lt;/h1&gt;

&lt;p&gt;The closure in Swift language adopts many syntactic sugar.&lt;/p&gt;

&lt;p&gt;The basic full syntax of a closure is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;{
  (parameters) -&amp;gt; retrunType in
  ... statements ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example that uses the array&amp;rsquo;s method &lt;code&gt;sorted&lt;/code&gt; to sort an array of word.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var words = [ &amp;quot;Dolor&amp;quot;, &amp;quot;eum&amp;quot;, &amp;quot;id&amp;quot;, &amp;quot;suscipit&amp;quot;, &amp;quot;necessitatibus&amp;quot;, &amp;quot;quod&amp;quot;, &amp;quot;hic&amp;quot;, &amp;quot;dignissimos&amp;quot; ]

let sortedWords = words.sorted({
  (lhs: String, rhs: String) -&amp;gt; Bool in
  return lhs &amp;lt; rhs
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Sugar #0 &amp;ndash; trailing closure&lt;/h2&gt;

&lt;p&gt;Often, closure parameter is placed last in parameter list. Swift thus provides
&lt;strong&gt;trailing closure&lt;/strong&gt;, which means your can write the inline closure just
outside the parameter list, following the closing &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Furthermore, if the closure is the only parameter, then the parenthesis can be
omitted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// trailing closure
let sortedWords = words.sorted/*()*/ {
  (lhs: String, rhs: String) -&amp;gt; Bool in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Sugar #1 &amp;ndash; return type inference&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;return type&lt;/strong&gt; can be inferred by swift compiler.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit return type
let sortedWords = words.sorted {
  (lhs: String, rhs: String) /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Sugar #2 &amp;ndash; parameter type inference&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;parameter types&lt;/strong&gt; can be inferred by swift compiler as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit parameter types
let sortedWords = words.sorted {
  (lhs/*: String*/, rhs/*: String*/) /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Sugar #3 &amp;ndash; parenthesis-less&lt;/h2&gt;

&lt;p&gt;Since no type annotation is needed, the &lt;strong&gt;parenthesis&lt;/strong&gt; can be omitted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit parenthesis
let sortedWords = words.sorted {
  /*(*/lhs/*: String*/, rhs/*: String)*/ /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Sugar #4 &amp;ndash; return statement inference&lt;/h2&gt;

&lt;p&gt;If the closure has one statement, then the &lt;strong&gt;return&lt;/strong&gt; statement can also be
inferred.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit &#39;return&#39;
let sortedWords = words.sorted {
  /*(*/lhs/*: String*/, rhs/*: String)*/ /*-&amp;gt; Bool*/ in
  /*return*/ lhs &amp;lt; rhs
}

//then we got:
let sortedWords = words.sorted { lhs, rhs in lhs &amp;lt; rhs }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Sugar #5 &amp;ndash; shorthand parameter name&lt;/h2&gt;

&lt;p&gt;Swift provides &lt;strong&gt;shorthand parameter names&lt;/strong&gt;: $0 for the 1st parameter, $1 for
the 2nd parameter, and so on. And as an side effect, the whole &lt;code&gt;(parameters) -&amp;gt;
returType in&lt;/code&gt; statement can be completely omitted&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// use shorthand parameters, omit the whole &#39;in&#39; statement
let sortedWords = words.sorted {
  /*(lhs: String, rhs: String) -&amp;gt; Bool in*/
  /*return*/ $0 &amp;lt; $1
}

// then we got:
let sortedWords = words.sorted { $0 &amp;lt; $1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Sugar #6 &amp;ndash; operator as a closure&lt;/h2&gt;

&lt;p&gt;In swift, &lt;strong&gt;operator&lt;/strong&gt; is a function, which in turn is a special closure, so&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// comes operator!
let sortedWords = words.sorted(&amp;lt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_9&#34;&gt;Fully-fledged Enumeration&lt;/h1&gt;

&lt;p&gt;In Swift, enumeration is fully-fledged type. You can associate different data
with each enumeration member, or define a raw type for enumeration.&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;Flexible definition syntax&lt;/h2&gt;

&lt;p&gt;you can define more than one member a line.&lt;/p&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;Type inference&lt;/h2&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Associated Value&lt;/h2&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;Raw type&lt;/h2&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Struct like enumeration&lt;/h2&gt;

&lt;p&gt;enumeration in Swift can have properties &amp;amp; methods.&lt;/p&gt;

&lt;p&gt;enumeration, like struct in Swift, is value type (while class is reference
accounted type).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GIT MISC</title>
      <link>http://localhost:1313/note/git/</link>
      <pubDate>Thu, 02 Oct 2014 03:36:12 CST</pubDate>
      
      <guid>http://localhost:1313/note/git/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Alias&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;working tree, working directory&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;index, staging area, cache, staged snapshot&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit[ted] history, commit[ted] snapshot&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The &lt;code&gt;add&lt;/code&gt; &amp;amp; &lt;code&gt;rm&lt;/code&gt; &amp;amp; &lt;code&gt;reset&lt;/code&gt; &amp;amp; &lt;code&gt;commit&lt;/code&gt; &amp;amp; &lt;code&gt;checkout&lt;/code&gt; Sub-commands.&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;between the &lt;em&gt;committed history&lt;/em&gt; &amp;amp; &lt;em&gt;staging area&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;commit&lt;/code&gt; submit changes from &lt;em&gt;staging area&lt;/em&gt; to &lt;em&gt;committed history&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;reset&lt;/code&gt; revert changes from &lt;em&gt;committed history&lt;/em&gt; back to &lt;em&gt;staging area&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;between the &lt;em&gt;staging area&lt;/em&gt; &amp;amp; &lt;em&gt;working tree&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;add&lt;/code&gt; submit changes from &lt;em&gt;working tree&lt;/em&gt; to &lt;em&gt;staging area&lt;/em&gt;, preparing
for committing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;rm&lt;/code&gt; remove file(s) from &lt;em&gt;stageing area&lt;/em&gt;, so they become &lt;em&gt;untracked&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;checkout&lt;/code&gt; restore changes from staging area or a specific commit of committed
history to &lt;em&gt;working directory&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;unstages&lt;/strong&gt; changes in staging area.
v
    git reset &lt;paths&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;or, if you ask for more, &lt;strong&gt;uncommits&lt;/strong&gt; changes in history.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset &amp;lt;commit-ish&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;rm&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;untracks&lt;/strong&gt; file(s) previously tracked in staging area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm --cache &amp;lt;paths&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;or, if you ask for more, &lt;strong&gt;removes&lt;/strong&gt; file(s) in the work directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm &amp;lt;paths&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt; vs &lt;code&gt;git checkout&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit-ish&amp;gt; &amp;lt;paths&amp;gt;&lt;/code&gt; only update &lt;em&gt;staging area&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout &amp;lt;paths&amp;gt;&lt;/code&gt; fetch &lt;code&gt;&amp;lt;paths&amp;gt;&lt;/code&gt; from &lt;em&gt;staging area&lt;/em&gt; to working
direcotry.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout &amp;lt;commit-ish&amp;gt;&lt;/code&gt; fetch &lt;code&gt;&amp;lt;paths&amp;gt;&lt;/code&gt; from &lt;em&gt;history&lt;/em&gt; to both
&lt;em&gt;index&lt;/em&gt; &amp;amp; &lt;em&gt;working direcotry&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;The &lt;code&gt;git Rebase&lt;/code&gt; Sub-command&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Advantage of &lt;code&gt;rebase&lt;/code&gt;:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;no additional merge commit&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;linear commit history&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Disadvantage of &lt;code&gt;rebase&lt;/code&gt;:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;safety&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;tracability: the evidences of merging are wiped away.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Golden rule of &lt;code&gt;git rebase&lt;/code&gt;:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;never&lt;/strong&gt; use it on &lt;strong&gt;public&lt;/strong&gt; branches.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;When to use &lt;code&gt;rebase&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Local cleanup&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Incorporating upstream changes into a feature branch&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integrating a approved feature&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;The &lt;code&gt;reset&lt;/code&gt;, &lt;code&gt;checkout&lt;/code&gt; And &lt;code&gt;revert&lt;/code&gt; Sub-commands&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;The parameters that you pass to &lt;code&gt;git reset&lt;/code&gt; and &lt;code&gt;git checkout&lt;/code&gt; determine
their scope. When you don’t include a &lt;strong&gt;&amp;lt;file path&amp;gt;&lt;/strong&gt; as a parameter, they
operate on whole commits.  Note that git revert has no file-level counterpart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;from &lt;a href=&#34;https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/commit-level-operations&#34;&gt;atlassian&amp;rsquo;s git tutorials&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Commit level operations&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git reset --[soft | mixed | hard] &amp;lt;commit-ish&amp;gt;&lt;/code&gt; &lt;strong&gt;move&lt;/strong&gt; branch tips backwards
or even forwards, while affecting &lt;em&gt;staging area&lt;/em&gt; &amp;amp; &lt;em&gt;working direcotry&lt;/em&gt; according to
options it is given.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;option&lt;/th&gt;
&lt;th&gt;history&lt;/th&gt;
&lt;th&gt;staging area&lt;/th&gt;
&lt;th&gt;working directory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--soft&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--mixed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--hard&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;git checkout &amp;lt;commit-ish&amp;gt;&lt;/code&gt; dose not move tips around.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git revert&lt;/code&gt; undo commits by adding a new commit. it is a safe (reversible) way
to undo commits, while &lt;code&gt;git reset&lt;/code&gt; is dangerous (irreversible) way to undo
commits.&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;File level operations&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git [reset|checkout] &amp;lt;commit-ish&amp;gt; &amp;lt;pathspec&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;history&lt;/th&gt;
&lt;th&gt;staging area&lt;/th&gt;
&lt;th&gt;working directory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;toc_10&#34;&gt;Summary&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;commit level&lt;/th&gt;
&lt;th&gt;file level&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;discard commits in private branches or throw away uncommited changes&lt;/td&gt;
&lt;td&gt;unstage a file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;swtich between branches or inspect old snapshots&lt;/td&gt;
&lt;td&gt;discard changes in the working directory&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;revert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;undo commits in public branches&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;N/A&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>GIT FLOW</title>
      <link>http://localhost:1313/note/git_flow/</link>
      <pubDate>Sun, 28 Sep 2014 16:38:26 CST</pubDate>
      
      <guid>http://localhost:1313/note/git_flow/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;1. Main Branches&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;main&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;keeps the official release history (usually with version nubmer tags
attached).&lt;/p&gt;

&lt;p&gt;i.e. every commits in master is a new release. all branches merged back
into master must have a new incremental version number.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the &lt;code&gt;develop&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;serves as an integration branch for features.&lt;/p&gt;

&lt;p&gt;nitghly build built from it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;2. Supporting Branches&lt;/h1&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;2.1 feature (or topic) branches&lt;/h2&gt;

&lt;p&gt;branch off from: &lt;code&gt;develop&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;merge into: &lt;code&gt;develop&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;naming convention: any name except &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;relase[/-]*&lt;/code&gt;,
&lt;code&gt;hotfix[/-]*&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Branch A New Feature Branch Off From Develop Branch
git checkout -b some-feature develop
# Add Feature Commits To Branch Some-feature ...
# Merge Feature Branch Back Into Develop Branch.
git checkout develop
git merge --no-ff some-feature
git push origin develop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;2.2 release branches&lt;/h2&gt;

&lt;p&gt;branch off from: &lt;code&gt;develop&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;merge into: &lt;code&gt;develop&lt;/code&gt; &amp;amp; &lt;code&gt;master&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;naming convention: &lt;code&gt;release/*&lt;/code&gt; or &lt;code&gt;release-*&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Branch A New Release Branch Off From Develop Branch
git checkout -b release-&amp;lt;version number&amp;gt; develop
# Bummp Up Version In Related Fiels.
git commit -m &#39;Bumped version number to &amp;lt;version number&amp;gt;&#39;
# Roll Out Release, Minor Bug Fixes
# Merge The Release Into Master, And Give It A New Tag.
git checkout master
git merge --no-ff release-&amp;lt;version number&amp;gt;
git tag -a &amp;lt;version number&amp;gt;
# Merge The Release Back Into Develop
git checkout develop
git merge --no-ff release-&amp;lt;version number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;2.3 hotfix (or maintenance) branches&lt;/h2&gt;

&lt;p&gt;branch off from: &lt;code&gt;master&lt;/code&gt; branch
merge into: &lt;code&gt;develop&lt;/code&gt; &amp;amp; &lt;code&gt;master&lt;/code&gt; branch if no active release branch existed
currrently.
naming convention: &lt;code&gt;hotfix/*&lt;/code&gt; or &lt;code&gt;hotfix-*&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Branch A New Hotfix Branch Off From Master Branch
git checkout -b hotfix-&amp;lt;version number&amp;gt; master
# Bummp Up Version In Related Fiels, Becuase It Will Finnaly Be Merged Back
# Into Master Branch.
git commit -m &#39;Bumped version number to &amp;lt;version number&amp;gt;&#39;
# Roll Out Hotfix, Minor Bug Fixes
# Merge The Hotfix Into Master, And Give It A New Tag.
git checkout master
git merge --no-ff hotfix-&amp;lt;version number&amp;gt;
git tag -a &amp;lt;version number&amp;gt;
# Merge The Hotfix Back Into Develop
git checkout develop
git merge --no-ff hotfix-&amp;lt;version number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GO&#39;S TEMPLATE LIBRARY</title>
      <link>http://localhost:1313/note/go_stdlib_template/</link>
      <pubDate>Fri, 26 Sep 2014 14:52:32 CST</pubDate>
      
      <guid>http://localhost:1313/note/go_stdlib_template/</guid>
      <description>

&lt;p&gt;I come across this library when I started to use &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;,
which says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is an extremely &lt;strong&gt;lightweight&lt;/strong&gt; engine that provides a very small amount of
logic. In our experience it is &lt;strong&gt;just the right amount of logic&lt;/strong&gt; to be able to
create a good static website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;3 Steps Using The Template Object&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;New&lt;/code&gt; an template object.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Parse&lt;/code&gt; template text.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Execute&lt;/code&gt; (apply) the template to data structure.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;6 Action Families&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;comment&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{/* comment here, line spanning allowed */}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;pipeline&lt;/strong&gt; like variable expansion (substitution)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{pipeline}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;if&lt;/strong&gt; family for branching logic&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{if _pipline_}} T1 {{end}}
{{if _pipline_}} T1 {{else}} T0 {{end}}
{{if _pipline_}} T1 {{else if _pipeline_ }} T0 {{end}}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;range&lt;/strong&gt; family for iteration (loop)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{range pipepine}} T1 {{end}}
{{range pipepine}} T1 {{else}} T0 {{end}}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;with&lt;/strong&gt; family for cursor (dot) moving&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{with pipeline}} T1 {{end}}
{{with pipeline}} T1 {{else}} T0 {{end}}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;template&lt;/strong&gt; family for tempates invocation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// with the dot &#39;.&#39; set to nil.
{{tempalte &amp;quot;name&amp;quot;}}
// with the dot &#39;.&#39; set to value of &#39;pipeline&#39;.
{{tempalte &amp;quot;name&amp;quot; pipeline}}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Argument Types&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;untyped &lt;strong&gt;constants&lt;/strong&gt; in go syntax&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;nil&lt;/strong&gt; &amp;ndash; the special constant&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;variable&lt;/strong&gt; name&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$variable_name&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;.&lt;/code&gt; &amp;ndash; the so called &amp;lsquo;context&amp;rsquo; constant&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;dot chain consist of: &lt;strong&gt;field&lt;/strong&gt; name,  &lt;strong&gt;key&lt;/strong&gt; name,  niladic &lt;strong&gt;method&lt;/strong&gt; name&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;(.Field.Key.Method args...).Field.Key ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;niladic &lt;strong&gt;function&lt;/strong&gt; name&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;parenthesized &lt;strong&gt;group&lt;/strong&gt; of above&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;print (func arg...) (.method arg...)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>